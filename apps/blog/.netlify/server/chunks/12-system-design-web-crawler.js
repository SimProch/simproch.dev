import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./12-system-design-web-crawler2.js";
const _12_system_design_web_crawler = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-1kbvwmm">This time we’re building a web crawler. Now, what exactly is a web crawler?</p> <p data-svelte-h="svelte-1etls3c">Sometimes called <a href="https://en.wikipedia.org/wiki/Web_crawler" rel="nofollow">robot or spider</a>, it’s basically a program that goes through a web page and saves it for later use.</p> <p data-svelte-h="svelte-1pep6od">There are multiple use cases of web crawler</p> <ul data-svelte-h="svelte-1yxii0n"><li><a href="https://archive.org/web/" rel="nofollow">Wayback Machine</a>, allowing users to visit old versions of web pages</li> <li><a href="https://search.google.com/search-console/about" rel="nofollow">Search Engine Indexing</a>, allowing creating a local copy of web page</li> <li><a href="https://cacm.acm.org/blogs/blog-cacm/153780-data-mining-the-web-via-crawling/fulltext" rel="nofollow">Data Mining</a>, allowing to create tools like ChatGPT</li> <li><a href="https://www.robotstxt.org/db/webreader.html" rel="nofollow">Monitoring of copyright infringement</a>, allowing to enforce law</li></ul> <p data-svelte-h="svelte-1oixz2g">So, it’s a very useful tool. Now, how would we design one?</p> <p data-svelte-h="svelte-1cxgs4p">Well, in short, it’s fairly simple:</p> <ul data-svelte-h="svelte-4vdwmb"><li>Get a list of URLs to crawl</li> <li>Go through the URLs, download them, go through them</li> <li>Save them</li> <li>Over time, go over already saved URLs to see changes</li></ul> <p data-svelte-h="svelte-k6m00p">A basic architecture can be seen below</p> <img src="/images/system-design/web-crawler-architecture.png" alt="Web Crawler Architecture" title="Web crawler architecture" class="image" loading="lazy"> <p data-svelte-h="svelte-dhnvd6">Now, it seems fairly simple at first glance. If I were to go through URLs of my university, it’d be fairly easy and fast. But the problem comes with
scalability. So, let’s set some rules:</p> <ul data-svelte-h="svelte-jncsuh"><li>Our tool is used for search engine indexing</li> <li>We collect 1 billion pages monthly</li> <li>We should consider both newly added pages, and also edited (already crawled)</li> <li>We want to store the pages for 5 years</li> <li>Duplicate content should be ignored</li></ul> <p data-svelte-h="svelte-svx4hp">So, looking at the above requirements, we need to:</p> <ul data-svelte-h="svelte-1u3rrxo"><li>Scale the system well - a billion pages monthly is a lot. We need to allow good processing</li> <li>Storage must be sufficient to store that many pages</li> <li>We can’t make too many requests so we don’t run into blacklisting or rate limiting</li></ul> <h2 data-svelte-h="svelte-dmr6oo"><a href="#bote">Back of the envelope</a><span id="bote"></span></h2> <ul data-svelte-h="svelte-tykg6m"><li>1 billions web pages monthly ~= 1 000 000 000 / 30 ~= 33 million pages daily ~= 1.5 million pages per hour</li> <li>1.5 million pages per hour / 3600 ~= 400 pages per Second</li> <li>QPS ~= 400 pages per second</li> <li>Peak QPS ~= 800 pages per second</li> <li>Storage: Website being ~500 kb =&gt; 1 billion * 500 kb ~= 500 billion kb ~= 500 trillion b ~= 500 TB per month</li> <li>Storage for 5 years = 500 TB <em>12</em> 5 ~= 30PB for 5 years</li></ul> <h2 data-svelte-h="svelte-1gzngd0"><a href="#high-level">High-level design</a><span id="high-level"></span></h2> <p data-svelte-h="svelte-89ek0j">So, we’ve already had a basic web crawler architecture. But we need to have our one quite scaled.</p> <p data-svelte-h="svelte-4zw0y9">We’re gonna crawl a lot of web pages. To achieve that, we’ll need a couple of items:</p> <ul data-svelte-h="svelte-1euj4nu"><li>We know we need to download URLs</li> <li>We know we need to filter some content out (duplicates)</li> <li>We know we want to store it</li> <li>We know we want to check them multiple times</li></ul> <p data-svelte-h="svelte-89ssrs">So, one of the things we need to do is get a list of URLs to crawl. We can see that as a so-called <a href="https://nlp.stanford.edu/IR-book/html/htmledition/the-url-frontier-1.html" rel="nofollow">URL Frontier</a>:</p> <img src="/images/system-design/url-frontier.png" alt="URL Frontier" title="URL Frontier" class="image" loading="lazy"> <p data-svelte-h="svelte-1et2qzy">So, here we can basically split our system into 3 components now:</p> <ul data-svelte-h="svelte-1pyaga3"><li>One where we don’t know the URLs yet but they exist (seed URL)</li> <li>One where we know them and they are yet to be crawled (URL Frontier)</li> <li>Ones that we’ve crawled (Downloaded, filtered, stored)</li></ul> <p data-svelte-h="svelte-5tehux">A <strong>seed URL</strong> is basically a root URL from where we begin crawling. This could be <code>about.google.com</code> or <code>google.com</code> - anything where we plan to go further.</p> <p data-svelte-h="svelte-1wzl2tb">Once we went through the links in <strong>seed URL</strong>, we then insert them into <strong>URL Frontier</strong>.</p> <p data-svelte-h="svelte-1q0r591">Effectively, the main difference is:</p> <ul data-svelte-h="svelte-11ugm80"><li>on <strong>seed URL</strong>, we go through all links on web and pass them forward</li> <li>on <strong>URL Frontier</strong>, we actually go through the pages</li></ul> <p data-svelte-h="svelte-1r59vc7">So, that’s the first two parts. What happens next?</p> <p data-svelte-h="svelte-17in5gk">Well, we need to download the HTML. There are many popular tools to do that, but this will likely be slow. Furthermore, we need a DNS resolver to be able to
match <code>wikipedia.org</code> to it’s IP address at the current time, because DNS of websites can change over time, but their name won’t, and we need DNS to download it.</p> <p data-svelte-h="svelte-y5z4g">After that, we’ll perform the filtering of duplicate web pages. For example, we can create a hash of the entire web page and see if it already exists. If not,
we’ll process it. If it exists, there’s no need to keep this in our storage.</p> <p data-svelte-h="svelte-1pj75lk">And finally, we can filter out some unwanted pages, such as blacklisted pages or unsupported content types/file extensions.</p> <p data-svelte-h="svelte-le63of">After all of this, we could save it to our storage. BUT! There are actually more steps!</p> <ul data-svelte-h="svelte-phcctg"><li>Imagine you’re crawling a lot of stuff, before you realize that the webpage doesn’t make sense because they are malformed. Therefore, before
starting the process of filtering and duplicating, we’ll first parse whether the page is okay</li> <li>The paths might be broken. We need to extract the correct URLs - for example, in the below image, the path is <code>/images/system-design</code>. That means absolute path relative to
root of the page. So, if we’d try to download this, we need to build the full URL.</li></ul> <p data-svelte-h="svelte-1glm07w">So finally, the design is:</p> <ul data-svelte-h="svelte-1rf15fa"><li>seed URLs to start the process</li> <li>URL Frontier contains URLs to be processed by crawler</li> <li>HTML Downloader takes the page, maps it to DNS, downloads it</li> <li>Content Parser parses the page to see if it’s worth checking it and it’s not malformed</li> <li>Content Seen validates whether we already have the page using hash of the page (or a checksum, if you will)</li> <li>If the content is valid and we want to keep track of it, we store it to disk (popular content such as wikipedia might be in memory)</li> <li>We perform some URL extractions to combine links relative to their parent</li> <li>We filter out blacklisted URLs or content types we do not want</li> <li>We also confirm that it’s a URL a URL we haven’t yet seen. If it is, we want to crawl it again at a later point -&gt; we add it to the frontier</li> <li>We finally store the visited URLs</li></ul> <img src="/images/system-design/system-design-web-crawler.webp" alt="Web Crawler Architecture" title="Web Crawler Architecture" class="image" loading="lazy"> <p data-svelte-h="svelte-ckn87n">And that’s our high level design!</p> <h2 data-svelte-h="svelte-4n91z0"><a href="#deep-dive">Deep-dive</a><span id="deep-dive"></span></h2> <p data-svelte-h="svelte-1hxk6q5">In this part, we’ll go through some deeper knowledge. One of them will again be algorithms.</p> <p data-svelte-h="svelte-14lwqon">What we’ll discuss is:</p> <ul data-svelte-h="svelte-tybln4"><li>Traversing the pages</li> <li>URL Frontier</li> <li>HTML Downloader</li> <li>Robustness</li> <li>Extensibility</li> <li>Problematic Content</li></ul> <h3 data-svelte-h="svelte-p8otuq"><a href="#traversing">Traversing</a><span id="traversing"></span></h3> <p data-svelte-h="svelte-qaixps">Traversing is the algorithmic part. If you’d open developer tools, you’d see that it’s actually a tree (or a graph). The difference is out of scope
of this post.</p> <p data-svelte-h="svelte-1nfg7uc">There are a bunch of algorithms to do that. The two I’ll mention are Depth-First Search (DFS) and Breadth-First Search (BFS)</p> <p data-svelte-h="svelte-1y559ix">Consider the following HTML code:</p> <pre class="language-html"><!-- HTML_TAG_START -->${`<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-5jrkrj">DFS is basically going deep first, as the name implies. What it means is with the above code, DFS process it as follows:</p> <ul data-svelte-h="svelte-1t07sq9"><li>root -&gt; first -&gt; first-1 -&gt; first-2 -&gt; first-3 -&gt; second -&gt; third</li></ul> <p data-svelte-h="svelte-1bfxjr3">BFS is very similar to it, traversing it on “levels”</p> <ul data-svelte-h="svelte-r93u5j"><li>root -&gt; first -&gt; second -&gt; third -&gt; first-1 -&gt; first-2 -&gt; first-3</li></ul> <p data-svelte-h="svelte-1k5awyj">Now, each have their use cases:</p> <ul data-svelte-h="svelte-ukdqa4"><li>DFS would go very deep very fast, and can be used when some pages have priority over others</li> <li>BFS is often the way to go</li></ul> <p data-svelte-h="svelte-1m024g4">Either way, we’re traversing a lot of stuff in short time. We need to be careful to not flood the page with requests.</p> <h3 data-svelte-h="svelte-19qqrcl"><a href="#url-frontier">URL Frontier</a><span id="url-frontier"></span></h3> <p data-svelte-h="svelte-1vkacc">As mentioned, we need to address flooding the page. URL frontier helps with that. This component contains URLs that are yet to be crawled.</p> <p data-svelte-h="svelte-cz3q3f">In here, we can effectively slow processing of some pages down. This is also called <a href="https://codepr.github.io/webcrawler-from-scratch/chapter1/crawling-rules.html" rel="nofollow">politeness</a></p> <p data-svelte-h="svelte-1swjryd">What we would use here is basically a queue. We’d add a delay between individual downloads of pages. Imagine the following:</p> <ul data-svelte-h="svelte-1hhz9jg"><li>We retrieve 20 links from wikipedia</li> <li>We process them all in a single queue, adding a second timeout before individual entries</li> <li>We wouldn’t flood the host</li></ul> <p data-svelte-h="svelte-7m0gip">Similarly, we want to give different priorities from pages - for example, a forum post on apple has (probably) less priority than root apple page. Therefore,
in URL frontier, we’d basically have 2 components:</p> <ul data-svelte-h="svelte-1wv6urt"><li>Prioritization, who takes URLs of specific seed as input, and returns prioritized URLs based on our bias</li> <li>Politeness, who takes a list of prioritized URLs and puts them into a queue, allowing for slower processing so we don’t flood the root</li></ul> <p data-svelte-h="svelte-1r748d9">The final component could ook like:</p> <img src="/images/system-design/prioritizer-and-politeness.webp" alt="Prioritizer And Politeness" title="Prioritizer And Politeness" class="image" loading="lazy"> <p data-svelte-h="svelte-1akprq6">Finally, we’d need to make sure the pages are fresh. So, finally, once we’d crawl the pages, we want to recrawl them again. A blog post from a year back
is unlikely to have new content. A main company profile is. So, we’d prioritize here as well.</p> <p data-svelte-h="svelte-t8p95x">Now the storage part is tricky - we want to keep the URLs on the disk, but getting them all from disk always is slow. So, we’ll have a hybrid approach</p> <ul data-svelte-h="svelte-1sgcr9c"><li>URLs soon to be taken are kept in memory so they are available</li> <li>Once they are processed, they are removed from memory</li> <li>New URLs to be processed are enqueued so they are in memory again</li></ul> <h3 data-svelte-h="svelte-10cm2en"><a href="#html-downloader">HTML Downloader</a><span id="html-downloader"></span></h3> <p data-svelte-h="svelte-alfb7v">The HTML downloader downloads the page. There’s an important nuance here - robots.txt.</p> <p data-svelte-h="svelte-o8cy04">robots.txt file is available on many pages that allows or disallows specific content to be crawled. You can find one on <a href="https://www.amazon.com/robots.txt" rel="nofollow">Amazon</a></p> <p data-svelte-h="svelte-k90nvc">These could be cached so we don’t need to download them all the time. When all domain has been crawled, it can be removed from memory. This allows better memory.</p> <p data-svelte-h="svelte-1kkv38e">Another performance optimizations we can do is having distributed crawls.</p> <ul data-svelte-h="svelte-k8f98d"><li>We’ll have multiple downloaders so that we can process multiple pages in parallel</li> <li>We could have servers geographically so that we download page from US faster with US server than with EU server</li> <li>Some pages might be intentionally slow, so we could set up a time limit for response, otherwise discard it</li> <li>Caching DNS. It can change, but we can completely separate it by keeping our cache of last DNS to web alias which can be updated out of the system</li></ul> <h3 data-svelte-h="svelte-yt1gep"><a href="#robustness">Robustness</a><span id="robustness"></span></h3> <p data-svelte-h="svelte-pk1at8">As is always the case, we want to have as robust system as we want. Other than performance, we need to care about data integrity and others:</p> <ul data-svelte-h="svelte-1f2mshx"><li>Exception handling - Make sure the system is not broken when a single page can’t be processed, allow for seamless recovery.</li> <li>Saving crawl states and data (yet to start, in progress, finished). Important piece of monitoring and allows for restarting specific crawls</li> <li>Consistent hashing to distribute load among downloaders</li></ul> <h3 data-svelte-h="svelte-1090yvy"><a href="#extensibility">Extensibility</a><span id="extensibility"></span></h3> <p data-svelte-h="svelte-1v0w3u3">For extensibility, consider again the original design:</p> <img src="/images/system-design/system-design-web-crawler.webp" alt="Web Crawler Architecture" title="Web Crawler Architecture" class="image" loading="lazy"> <p data-svelte-h="svelte-180ufbs">Now, imagine that we have decided to download all pictures from here. Where would we do that? Well, probably after downloading the content.</p> <p data-svelte-h="svelte-7n6muk">All systems need to be flexible, and crawler can be extended by supporting new content types and downloading specific content. Our system is extensible as of now,
but with some new changes it might not be. This was just a test to see if we can extend it - and we can.</p> <h3 data-svelte-h="svelte-sdco0g"><a href="#problematic-content">Problematic Content</a><span id="problematic-content"></span></h3> <p data-svelte-h="svelte-76jues">Now, I’ve mentioned problematic content before. In this case, I’m talking more about problems for the crawler:</p> <ul data-svelte-h="svelte-1jujhun"><li>A lot of pages are duplicates. As mentioned before, we can filter them to allow for better performance</li> <li>There are contents with little to no value, such as advertisements spread in multiple (and sometimes empty) tags to allow blocking ad-blocker. We can filter this out as well.</li></ul> <p data-svelte-h="svelte-1y79vqy">Finally, there are some pages that are called <a href="https://en.wikipedia.org/wiki/Spider_trap" rel="nofollow">Spider traps</a>. These could cause serious harm.</p> <p data-svelte-h="svelte-uuonxn">To give an idea, <code>example.com</code> is a page that allows anything in URL. So, we could potentially have something like <code>example.com/foo/bar/foo/bar/foo/bar</code> up to
maximum length. And each of these could render the same page - with only link being to another page.</p> <p data-svelte-h="svelte-rhbesq">These are called spider traps because there is no content and your crawler is still processing it, making it slow with no value.</p> <p data-svelte-h="svelte-1tjajfp">We can do many things:</p> <ul data-svelte-h="svelte-ooxk2k"><li>Manually verify page is problematic and blacklist it</li> <li>Custom filters, such as maximum depth, etc.</li></ul> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-xk4m2h">So, here we discussed a web crawler. Hopefully that was fruitful and we’ve learned something new.</p> <p data-svelte-h="svelte-nkgra1">Keep in mind that there can be quite a few problems again:</p> <ul data-svelte-h="svelte-1x9nvdr"><li>Horizontal scaling, database replication, availability and consistency</li> <li>Analytics</li> <li>Filtering out unwanted pages with low quality</li> <li>Server side rendered webs might need a different approach due to dynamic content in HTML</li></ul> <h1 data-svelte-h="svelte-uqufyh"><a href="#references">References</a><span id="references"></span></h1> <ul data-svelte-h="svelte-1lg1xta"><li><a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF" rel="nofollow">System Design Interview book</a></li> <li><a href="https://en.wikipedia.org/wiki/Web_crawler" rel="nofollow">Web crawler</a></li> <li><a href="https://archive.org/web/" rel="nofollow">Wayback Machine</a></li> <li><a href="https://search.google.com/search-console/about" rel="nofollow">Search Engine Indexing</a></li> <li><a href="https://cacm.acm.org/blogs/blog-cacm/153780-data-mining-the-web-via-crawling/fulltext" rel="nofollow">Data Mining</a></li> <li><a href="https://www.robotstxt.org/db/webreader.html" rel="nofollow">Monitoring of copyright infringement</a></li> <li><a href="https://codepr.github.io/webcrawler-from-scratch/chapter1/crawling-rules.html" rel="nofollow">Politeness</a></li> <li><a href="https://www.amazon.com/robots.txt" rel="nofollow">Amazon robots.txt</a></li> <li><a href="https://en.wikipedia.org/wiki/Spider_trap" rel="nofollow">Spider traps</a></li></ul>`;
});
export {
  _12_system_design_web_crawler as default
};
