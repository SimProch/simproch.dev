import { c as create_ssr_component, b as add_attribute, v as validate_component } from "./ssr.js";
import { C as Contents } from "./x-ray-effect-with-html2.js";
const css$2 = {
  code: ".wrapper.svelte-1e4gwb4{width:100%;height:400px;position:relative}svg.svelte-1e4gwb4{position:absolute;top:0;left:0;right:0;bottom:0;display:block;width:100%;height:100%}",
  map: '{"version":3,"file":"XRaySvg.svelte","sources":["XRaySvg.svelte"],"sourcesContent":["<script lang=\\"ts\\">import { onMount } from \\"svelte\\";\\nlet svgElement;\\nlet maskedElement;\\nlet circleFeedback;\\nlet svgPoint;\\nonMount(() => {\\n  svgElement = document.querySelector(\\"svg\\");\\n  maskedElement = document.querySelector(\\"#mask-circle\\");\\n  circleFeedback = document.querySelector(\\"#circle-shadow\\");\\n  svgPoint = svgElement.createSVGPoint();\\n  document.addEventListener(\\n    \\"touchmove\\",\\n    function(e) {\\n      e.preventDefault();\\n      var touch = e.targetTouches[0];\\n      if (touch) {\\n        update(cursorPoint(touch, svgElement));\\n      }\\n    },\\n    false\\n  );\\n});\\nfunction cursorPoint(e, svg) {\\n  svgPoint.x = e.clientX;\\n  svgPoint.y = e.clientY;\\n  return svgPoint.matrixTransform(svg.getScreenCTM()?.inverse());\\n}\\nfunction update(svgCoords) {\\n  maskedElement.setAttribute(\\"cx\\", svgCoords.x);\\n  maskedElement.setAttribute(\\"cy\\", svgCoords.y);\\n  circleFeedback.setAttribute(\\"cx\\", svgCoords.x);\\n  circleFeedback.setAttribute(\\"cy\\", svgCoords.y);\\n}\\n<\/script>\\n\\n<svelte:window on:mousemove={(e) => update(cursorPoint(e, svgElement))} />\\n\\n<div class=\\"wrapper\\">\\n\\t<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n\\t\\t<image\\n\\t\\t\\txmlns:xlink=\\"http://www.w3.org/1999/xlink\\"\\n\\t\\t\\txlink:href=\\"/images/hand-flesh.jpeg\\"\\n\\t\\t\\twidth=\\"100%\\"\\n\\t\\t\\theight=\\"100%\\"\\n\\t\\t/>\\n\\t</svg>\\n\\n\\t<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\">\\n\\t\\t<defs>\\n\\t\\t\\t<clipPath id=\\"mask\\">\\n\\t\\t\\t\\t<circle id=\\"mask-circle\\" cx=\\"50%\\" cy=\\"50%\\" r=\\"8%\\" style=\\"fill: #ffffff\\" />\\n\\t\\t\\t</clipPath>\\n\\t\\t</defs>\\n\\t\\t<g clip-path=\\"url(#mask)\\">\\n\\t\\t\\t<image\\n\\t\\t\\t\\txmlns:xlink=\\"http://www.w3.org/1999/xlink\\"\\n\\t\\t\\t\\txlink:href=\\"/images/hand-bone.jpeg\\"\\n\\t\\t\\t\\twidth=\\"100%\\"\\n\\t\\t\\t\\theight=\\"100%\\"\\n\\t\\t\\t/>\\n\\t\\t</g>\\n\\t\\t<circle\\n\\t\\t\\tid=\\"circle-shadow\\"\\n\\t\\t\\tcx=\\"50%\\"\\n\\t\\t\\tcy=\\"50%\\"\\n\\t\\t\\tr=\\"8%\\"\\n\\t\\t\\tstyle=\\"stroke: #fff; fill: transparent; stroke-width: 5;\\"\\n\\t\\t/>\\n\\t</svg>\\n</div>\\n\\n<style lang=\\"scss\\">.wrapper {\\n  width: 100%;\\n  height: 400px;\\n  position: relative;\\n}\\n\\nsvg {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  display: block;\\n  width: 100%;\\n  height: 100%;\\n}</style>\\n"],"names":[],"mappings":"AAuEmB,uBAAS,CAC1B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,QACZ,CAEA,kBAAI,CACF,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IACV"}'
};
const XRaySvg = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$2);
  return ` <div class="wrapper svelte-1e4gwb4" data-svelte-h="svelte-17ts8z1"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="svelte-1e4gwb4"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/images/hand-flesh.jpeg" width="100%" height="100%"></image></svg> <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" class="svelte-1e4gwb4"><defs><clipPath id="mask"><circle id="mask-circle" cx="50%" cy="50%" r="8%" style="fill: #ffffff"></circle></clipPath></defs><g clip-path="url(#mask)"><image xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="/images/hand-bone.jpeg" width="100%" height="100%"></image></g><circle id="circle-shadow" cx="50%" cy="50%" r="8%" style="stroke: #fff; fill: transparent; stroke-width: 5;"></circle></svg> </div>`;
});
const css$1 = {
  code: ".wrapper.svelte-cjdue4.svelte-cjdue4{width:100%;height:400px;position:relative}.wrapper.svelte-cjdue4 div.svelte-cjdue4{position:absolute;top:0;left:0;right:0;bottom:0;display:block;width:100%;height:400px}.wrapper.svelte-cjdue4 div img.svelte-cjdue4{width:100%;height:100%}",
  map: '{"version":3,"file":"XRayHtml.svelte","sources":["XRayHtml.svelte"],"sourcesContent":["<script lang=\\"ts\\">let innerDiv;\\nconst onMouseMove = (e) => {\\n  if (!innerDiv) {\\n    return;\\n  }\\n  const boundaries = innerDiv.getBoundingClientRect();\\n  const x = e.clientX - boundaries.left;\\n  const y = e.clientY - boundaries.top;\\n  innerDiv.setAttribute(\\"style\\", `clip-path: circle(50px at ${x}px ${y}px)`);\\n};\\n<\/script>\\n\\n<svelte:window on:mousemove={(e) => onMouseMove(e)} />\\n\\n<div class=\\"wrapper\\">\\n\\t<div class=\\"outer\\">\\n\\t\\t<img src=\\"/images/hand-flesh.jpeg\\" alt=\\"img1\\" />\\n\\t</div>\\n\\t<div class=\\"inner\\" bind:this={innerDiv}>\\n\\t\\t<img src=\\"/images/hand-bone.jpeg\\" alt=\\"img2\\" />\\n\\t</div>\\n</div>\\n\\n<style lang=\\"scss\\">.wrapper {\\n  width: 100%;\\n  height: 400px;\\n  position: relative;\\n}\\n.wrapper div {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  display: block;\\n  width: 100%;\\n  height: 400px;\\n}\\n.wrapper div img {\\n  width: 100%;\\n  height: 100%;\\n}</style>\\n"],"names":[],"mappings":"AAuBmB,oCAAS,CAC1B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,QACZ,CACA,sBAAQ,CAAC,iBAAI,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KACV,CACA,sBAAQ,CAAC,GAAG,CAAC,iBAAI,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IACV"}'
};
const XRayHtml = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let innerDiv;
  $$result.css.add(css$1);
  return ` <div class="wrapper svelte-cjdue4"><div class="outer svelte-cjdue4" data-svelte-h="svelte-16czkhs"><img src="/images/hand-flesh.jpeg" alt="img1" class="svelte-cjdue4"></div> <div class="inner svelte-cjdue4"${add_attribute("this", innerDiv, 0)} data-svelte-h="svelte-qfq7qp"><img src="/images/hand-bone.jpeg" alt="img2" class="svelte-cjdue4"></div> </div>`;
});
const css = {
  code: ".wrapper.svelte-2a6ug.svelte-2a6ug{width:100%;height:400px;position:relative}.wrapper.svelte-2a6ug .inner.svelte-2a6ug,.wrapper.svelte-2a6ug .outer.svelte-2a6ug{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:400px;display:flex;flex-direction:column}.wrapper.svelte-2a6ug .inner div.svelte-2a6ug,.wrapper.svelte-2a6ug .outer div.svelte-2a6ug{display:flex;flex-direction:row;flex:1}.wrapper.svelte-2a6ug .inner div div.svelte-2a6ug,.wrapper.svelte-2a6ug .outer div div.svelte-2a6ug{display:flex;align-items:center;justify-content:center;font-size:30px;width:100%;height:100%}.wrapper.svelte-2a6ug .inner.svelte-2a6ug{background-color:black;color:white}",
  map: '{"version":3,"file":"XRayHtmlDarkMode.svelte","sources":["XRayHtmlDarkMode.svelte"],"sourcesContent":["<script lang=\\"ts\\">let innerDiv;\\nconst onMouseMove = (e) => {\\n  if (!innerDiv) {\\n    return;\\n  }\\n  const boundaries = innerDiv.getBoundingClientRect();\\n  const x = e.clientX - boundaries.left;\\n  const y = e.clientY - boundaries.top;\\n  innerDiv.setAttribute(\\"style\\", `clip-path: circle(50px at ${x}px ${y}px); z-index:5`);\\n};\\n<\/script>\\n\\n<svelte:window on:mousemove={(e) => onMouseMove(e)} />\\n\\n<div class=\\"wrapper\\">\\n\\t<div class=\\"outer\\">\\n\\t\\t<div>\\n\\t\\t\\t<div>Hey</div>\\n\\t\\t\\t<div>Hi</div>\\n\\t\\t</div>\\n\\t\\t<div>\\n\\t\\t\\t<div>Hello</div>\\n\\t\\t\\t<div>Hola</div>\\n\\t\\t</div>\\n\\t</div>\\n\\t<div class=\\"inner\\" bind:this={innerDiv}>\\n\\t\\t<div>\\n\\t\\t\\t<div>Well</div>\\n\\t\\t\\t<div>This</div>\\n\\t\\t</div>\\n\\t\\t<div>\\n\\t\\t\\t<div>Is</div>\\n\\t\\t\\t<div>New</div>\\n\\t\\t</div>\\n\\t</div>\\n</div>\\n\\n<style lang=\\"scss\\">.wrapper {\\n  width: 100%;\\n  height: 400px;\\n  position: relative;\\n}\\n.wrapper .inner,\\n.wrapper .outer {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  width: 100%;\\n  height: 400px;\\n  display: flex;\\n  flex-direction: column;\\n}\\n.wrapper .inner div,\\n.wrapper .outer div {\\n  display: flex;\\n  flex-direction: row;\\n  flex: 1;\\n}\\n.wrapper .inner div div,\\n.wrapper .outer div div {\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 30px;\\n  width: 100%;\\n  height: 100%;\\n}\\n.wrapper .inner {\\n  background-color: black;\\n  color: white;\\n}</style>\\n"],"names":[],"mappings":"AAqCmB,kCAAS,CAC1B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,QACZ,CACA,qBAAQ,CAAC,mBAAM,CACf,qBAAQ,CAAC,mBAAO,CACd,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAClB,CACA,qBAAQ,CAAC,MAAM,CAAC,gBAAG,CACnB,qBAAQ,CAAC,MAAM,CAAC,gBAAI,CAClB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,IAAI,CAAE,CACR,CACA,qBAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAG,CACvB,qBAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAI,CACtB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IACV,CACA,qBAAQ,CAAC,mBAAO,CACd,gBAAgB,CAAE,KAAK,CACvB,KAAK,CAAE,KACT"}'
};
const XRayHtmlDarkMode = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let innerDiv;
  $$result.css.add(css);
  return ` <div class="wrapper svelte-2a6ug"><div class="outer svelte-2a6ug" data-svelte-h="svelte-d4h8t4"><div class="svelte-2a6ug"><div class="svelte-2a6ug">Hey</div> <div class="svelte-2a6ug">Hi</div></div> <div class="svelte-2a6ug"><div class="svelte-2a6ug">Hello</div> <div class="svelte-2a6ug">Hola</div></div></div> <div class="inner svelte-2a6ug"${add_attribute("this", innerDiv, 0)} data-svelte-h="svelte-1hd1t07"><div class="svelte-2a6ug"><div class="svelte-2a6ug">Well</div> <div class="svelte-2a6ug">This</div></div> <div class="svelte-2a6ug"><div class="svelte-2a6ug">Is</div> <div class="svelte-2a6ug">New</div></div></div> </div>`;
});
const X_ray_effect_with_html = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1 data-svelte-h="svelte-1k0ipjr">X-Ray Effect with HTML</h1> <p data-svelte-h="svelte-o9d19a">How to create X-Ray effect with HTML only</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-1k2psy8">In my time in web development, I’ve ran across quite a few interesting bits and pieces that I saw but always wondered how they were done.
One thing that I especially love is the <a href="https://codepen.io/noeldelgado/pen/ByxQjL" rel="nofollow">X-Ray effect</a> using SVG masks.
In this post, I’d like to do the same with HTML to try and preview a dark mode.</p> <h2 data-svelte-h="svelte-1rk0y7h"><a href="#svg-x-ray-effect">SVG X-Ray effect</a><span id="svg-x-ray-effect"></span></h2> <p data-svelte-h="svelte-vwn3ru">The X-Ray effect with SVG can be achieved fairly easily. The below example is done by the same code mentioned above:</p> ${validate_component(XRaySvg, "XRaySvg").$$render($$result, {}, {}, {})} <p data-svelte-h="svelte-whlvie">There’s a multitude of ways to do this, but I’ve chosen to show it as in the example above. To put it simply:</p> <ul data-svelte-h="svelte-d5pm7h"><li>2 SVG images with absolute positioning over one another</li> <li>A SVGCircle element that moves by tracking mouse</li> <li>The SVGCircleElement has transparent fill, meaning the image below is visible</li></ul> <p data-svelte-h="svelte-1rf6qru">Now, imagine you want to do the same with HTML elements. And let’s start with a simple image</p> <ul data-svelte-h="svelte-nrftbg"><li>We can put 2 images that are not SVGs with absolute positioning over one another</li> <li>We don’t have any HTML circle element that is not part of SVG.</li></ul> <p data-svelte-h="svelte-7fhqhv">Therefore, we can’t take the same approach to HTML elements. What we can do is use <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path" rel="nofollow">clip-path</a>.</p> <h2 data-svelte-h="svelte-gg029e"><a href="#html-x-ray-effect">HTML X-Ray effect</a><span id="html-x-ray-effect"></span></h2> ${validate_component(XRayHtml, "XRayHtml").$$render($$result, {}, {}, {})} <p data-svelte-h="svelte-1ox7aa9">This time, the XRay is achieved with purely HTML. To achieve that, we need to:</p> <ul data-svelte-h="svelte-16n4g6y"><li>Have 2 images on top of one another</li> <li>The one we want hidden is under the one that is visible</li> <li>On the hidden element, we apply <code>clip-path</code> based on where the mouse is</li></ul> <p data-svelte-h="svelte-124b0hy">This X-Ray effect gives us so much more power and we can make some interesting designs out of it!</p> <h2 data-svelte-h="svelte-8ns9g5"><a href="#html-x-ray-effect-dark-mode">HTML X-Ray effect - Dark mode preview</a><span id="html-x-ray-effect"></span></h2> <p data-svelte-h="svelte-56om8x">Now that we’ve moved out of SVG area, the benefit of doing this on HTML is that we can do it on anything! For example - divs.</p> ${validate_component(XRayHtmlDarkMode, "XRayHtmlDarkMode").$$render($$result, {}, {}, {})} <p data-svelte-h="svelte-11c9qe1">Now, this is quite a basic example. However, at this point, you’re able to have 2 versions of your page. One in one theme, the other in another.
Admittedly, in a large scale projects, this makes the webpage a lot slower as you have to effectively render double items. However,
you could always improve upon that.</p> <p data-svelte-h="svelte-dkkeqw">For a way to see how this could be created professionally, visit <a href="https://www.workwithlogex.com/" rel="nofollow">the webpage of my old employer</a>. There, they’ve
put it together for a hiring page and won an award for it!</p>`;
});
export {
  X_ray_effect_with_html as default
};
