import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./03-hash-maps2.js";
const _03_hash_maps = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-vo5nh4">So, you want to know about <a href="https://en.wikipedia.org/wiki/Hash_table" rel="nofollow">Hash Maps</a>, eh?</p> <p data-svelte-h="svelte-18qqr5s">Well, the first thing to say that a hash map is a word known by many names. Just to name a few:</p> <ul data-svelte-h="svelte-1k3vzmx"><li>Hashes</li> <li>Maps</li> <li>Hash maps</li> <li>Hash tables</li> <li>Dictionaries</li> <li>Associative arrays</li> <li>Key-value pairs</li></ul> <p data-svelte-h="svelte-1uhj96k">Now, it’s all basically a different name to the same issue. I’ve worked with JS all my life, and there
everything is built around them. Because JS Objects are basically hash tables, and everything in JS is an object.</p> <p data-svelte-h="svelte-2076p3">So, why do we care? Well, for starters, they are extremely efficient! No matter the size of the object, value retrieval is always the same - O(1)</p> <p data-svelte-h="svelte-xsleu5">But if they are so efficient, why don’t we use them everywhere? Well, for starters, we don’t know where they are stored! We don’t know the order!</p> <p data-svelte-h="svelte-f41e0a">(I will say that there are some nuances to JS objects and they are sometimes sorted by name, but let’s not go into JS specifics)</p> <p data-svelte-h="svelte-1m202ua">A hash map can be as simple as:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> hashMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">addToHashMap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=></span> hashMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">readFromHashMap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> hashMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-18e7vbd">And that’s basically it! Now, really, there’s nothing more to it. It’s a key value pair.</p> <p data-svelte-h="svelte-1vbiohh">The problem more often comes with the usage. Because it’s called <strong>hash</strong> map for a reason</p> <ul data-svelte-h="svelte-63husz"><li>The keys are hashes</li> <li>A hash can be anything</li></ul> <p data-svelte-h="svelte-1rq6gcz">And that’s the problem. Most of the time, we’re using IDs as keys. However, sometimes we want to have some
other value. We’d have to define our function to make sure it’s unique so we do not overwrite it.</p> <p data-svelte-h="svelte-14zffuf">Now, how can we make something faster? Well, consider the following quest:</p> <ul data-svelte-h="svelte-4w94pz"><li>Array has duplicates</li> <li>Array is a subset of another one</li></ul> <p data-svelte-h="svelte-88o9lq">Now, for the first one, we could either:</p> <ul data-svelte-h="svelte-1dt5shq"><li>Iterate over array and compare all with all</li> <li>Sort the array and find if there are neighbours that are same</li> <li>Use hash map!</li></ul> <p data-svelte-h="svelte-1pwcvjj">So, let’s quickly use a hash map:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">hasDuplicates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> hashMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hashMap<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        hashMap<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-6qd9f3">With hash maps, we can do it really quickly and easily!</p> <p data-svelte-h="svelte-16i1j2r">As for the array being subset of another one, let’s take a quick look on the approahc:</p> <ul data-svelte-h="svelte-10eye4l"><li>Iterate over one array and compare with items in second array</li> <li>Or use a hash map!<ul><li>Save the values from bigger array into hash map</li> <li>Iterate over smaller array</li> <li>If smaller array contains something that’s not in hash map, then return false</li> <li>Otherwise smaller array is subset</li></ul></li></ul> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">isArrSubset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> potentialSubset <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">>=</span> arr2<span class="token punctuation">.</span>length <span class="token operator">?</span> arr2 <span class="token operator">:</span> arr1<span class="token punctuation">;</span>
    <span class="token keyword">const</span> potentialSuperset <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length <span class="token operator">>=</span> arr2<span class="token punctuation">.</span>length <span class="token operator">?</span> arr1 <span class="token operator">:</span> arr2<span class="token punctuation">;</span>
    <span class="token keyword">const</span> hashMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> potentialSuperset<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        hashMap<span class="token punctuation">[</span>potentialSuperset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> isSubset <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> potentialSubset<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hashMap<span class="token punctuation">[</span>potentialSubset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> isSubset <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> isSubset
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-zpr8k8">So, in this part, we’ve investigated hash maps. Hash maps are very efficient and O(1). We’d like to
achieve their speed everywhere. However, sometimes it’s not possible. We can at least use them to make
things faster.</p> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-b9znl0"><li><a href="https://www.amazon.com/Common-Sense-Guide-Data-Structures-Algorithms/dp/1680502441" rel="nofollow">A Common-Sense Guide to Data Structures and Algorithms</a></li></ul>`;
});
export {
  _03_hash_maps as default
};
