import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./5-system-design-consistent-hashing2.js";
const _5_system_design_consistent_hashing = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-59bdlz">So, at the start, I’ve gone through the tooling and said we have all we need. And yet, in rate limiters, I’ve talked about algorithms.</p> <p data-svelte-h="svelte-wmq5b7">Well, there are some tools we need to understand some more before using them in proper design. And consistent hashing is one of them as well.</p> <h2 data-svelte-h="svelte-s14xn3"><a href="#data-in-multiple-caches">Data in multiple caches</a><span id="data-in-multiple-caches"></span></h2> <p data-svelte-h="svelte-1t6y7ap">Let’s rewind a bit. We’ve talked about saving data to cache because it is fast. But why is it fast? Well, because it’s (at least partially)
in memory. What does it mean?</p> <p data-svelte-h="svelte-1t13vde">Well, let’s consider the following JS code:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> keyValueStore <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">get</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=></span> keyValueStore<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>keyValueStore<span class="token punctuation">)</span><span class="token punctuation">.</span>length
    keyValueStore<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> keyValueStore <span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1h6wlgc">This very simple JS code allows us to create a hash table. Whenever data is added, it’s put in an object. For the lifetime of the application,
the object will be accessible and we can use it as cache. The data is stored in memory.</p> <p data-svelte-h="svelte-17ggw3j">Now, of course there are limits to this. You can’t store the entire world in it. For example, just now I tried and got the error at 112 million items.</p> <p data-svelte-h="svelte-1en18kj">So, we got to a limit. To add more items, the next steps would be:</p> <ul data-svelte-h="svelte-1d29ayi"><li>scale vertically, raising the RAM on my machine</li> <li>scale horizontally, adding additional computers</li></ul> <p data-svelte-h="svelte-1i8o7mq">Well, let’s consider that getting another machine is less costly - because it may be (and likely will be at some point) in the case of system design.</p> <p data-svelte-h="svelte-1o3a53o">So, I’m gonna add 2 more computers to be able to store 300 millions of data. Well, how do I do that now? Let’s list the problems:</p> <ul data-svelte-h="svelte-tngiqn"><li>When we add another machine, if I’d still call just this machine, it would be useless. We already solved for that previously - load balancer</li> <li>However, now that we get the ID, we work with the size of the keyValueStore. But it can be different on 2 machines because each will hold different amount</li></ul> <p data-svelte-h="svelte-dwuxb1">So, to work with that, we’ll need to somehow add the machine identifier in there! With two machines, we could store on even and odd numbers. With more, we’d be doing the same -
modulo operator, but with number of machines.</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> serverIndex <span class="token operator">=</span> <span class="token function">getCurrentServerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">set</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> id <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>keyValueStore<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">*</span> serverIndex <span class="token operator">+</span> serverIndex
    keyValueStore<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> value
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-jy2xpp">A function above is something that could be used. We know the server we’re using, so we would be using that, and use it to calculate where to store.</p> <p data-svelte-h="svelte-yzr75b">Now, the next step would be to retrieve it. Say you are retrieving a data where index is <code>10</code>. How would you know that?
Well, since you know the amount of servers, then the server index is <code>10 % 3</code> =&gt; 1. Would it work then? If we have 3 servers, then it would:</p> <ul data-svelte-h="svelte-pfh3z9"><li><code>server0</code> stores <code>0,3,6,9</code></li> <li><code>server1</code> stores <code>1,4,7,10</code></li> <li><code>server2</code> stores <code>2,5,8,11</code></li></ul> <p data-svelte-h="svelte-10m0wsy">So, now we have a way to retrieve data from specific server. Note a couple things:</p> <ul data-svelte-h="svelte-8pafcm"><li>the data is stored in each server in this way. <code>server2</code> doesn’t have <code>0</code> or <code>1</code>. There is no reason for the individual stores to keep them like this</li> <li>the storage on individual servers can be done with just the length. The problem is more about <strong>knowing which store to save to/fetch from</strong> rather than the insides</li> <li>I’ve made this example this way intentionally to keep it simple. You are likely to generate a new <a href="https://en.wikipedia.org/wiki/List_of_hash_functions" rel="nofollow">hash</a> for each item, and then work with modulos only</li></ul> <p data-svelte-h="svelte-1hauif3">So, now that we know the identifier we use and number of servers, we can define a function to know on WHICH server the data should be stored:</p> <blockquote data-svelte-h="svelte-vruuu9"><p><code>serverIndex = hash(key) % numberOfServers</code></p></blockquote> <p data-svelte-h="svelte-1xyc7rj">This server index would then be used to both save and retrieve data.</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> currentValue <span class="token operator">=</span> <span class="token function">getDataFromServer</span><span class="token punctuation">(</span>serverIndex<span class="token punctuation">,</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token keyword">const</span> saveDataToServer <span class="token operator">=</span> <span class="token function">saveDataToCache</span><span class="token punctuation">(</span>serverIndex<span class="token punctuation">,</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1lyz8c4">In both cases, the <code>hash(key)</code> would be used as identifier in the key value store.</p> <h2 data-svelte-h="svelte-1rmf66j"><a href="#what-is-consistent-hashing">What is Consistent Hashing</a><span id="what-is-consistent-hashing"></span></h2> <p data-svelte-h="svelte-o4zvjo">So, we’ve found that it’s easy to work with a single server, if it fits our needs. But, when working with multiple servers, we may encounter issues when saving and fetching them.</p> <p data-svelte-h="svelte-p2vw8c">Now, we have another big issue. Because system design is all about scaling our system and its individual parts.
We’ve gone through scaling individual parts of the system previously, but didn’t talk about the issues it entails.</p> <p data-svelte-h="svelte-tusrke">Imagine that you have a traffic burst. Well, what we mentioned before is we would add servers. So what would happen here?</p> <p data-svelte-h="svelte-nxej3k">Well, we are counting with the number of servers. So, the function would work fine… if it didn’t have any data saved.</p> <p data-svelte-h="svelte-1yqr1tw">Imagine the following scenario:</p> <ul data-svelte-h="svelte-1xhn6bq"><li>You start of with 3 servers, having already saved values into <code>server0</code> being <code>0, 3, 6, 9, 12, 15</code></li> <li>You then switch to 6 server. The first value to be saved in <code>server5</code> would be <code>6</code>. But that already is in <code>server0</code>!</li></ul> <p data-svelte-h="svelte-sjpxlv">You’d run into issues with consistency. And that is what consistent hashing is about - resolving these issues.</p> <h2 data-svelte-h="svelte-1s1xa5p"><a href="#hash-key-rings">Hash key rings</a><span id="hash-key-rings"></span></h2> <p data-svelte-h="svelte-7wdk6f">When we search for consistent hashing on google, we could run into the following <a href="https://en.wikipedia.org/wiki/Consistent_hashing" rel="nofollow">Wikipedia page</a>.
In there, we could see an image of ring containing many servers.</p> <img src="/images/system-design/hashing-ring.png" alt="Hashing ring" title="Hashing ring" class="image" loading="lazy"> <p data-svelte-h="svelte-8o6zja">This circle contains 5 different servers at different points. So how does that help us?</p> <p data-svelte-h="svelte-1arsc58">Well, this ring is basically what we’ve already built above. While we were working with numerical IDs that we were autoincrementing,
you could imagine this being a predefined space upon which the server is chosen. From the image above:</p> <ul data-svelte-h="svelte-dewog4"><li>The first server is on space 0-74 inclusive. Whenever a hash is in this range, first server is chosen for the operation</li> <li>The second server is on space of 75-139 inclusive. Whenever a hash is in this range, the second server is chosen for the operation.</li></ul> <p data-svelte-h="svelte-13jq08v">You get the idea. Now, why is it important to make this into a circle? Well, it’s not, but it’s easier to visualize how we can deal with server being down.</p> <p data-svelte-h="svelte-dxm638">Imagine that in the image, the first server is removed. What happens with the values so that we can ensure consistency?</p> <ul data-svelte-h="svelte-1redlsi"><li>A server at 0-74 is removed</li> <li>The first space becomes 0-139</li> <li>The originally second server now contains all these values and deals with requests</li></ul> <p data-svelte-h="svelte-qkf9ba">Now, what if we add a server? Well, the same thing</p> <ul data-svelte-h="svelte-1m3a7n3"><li>First server is at 0-74</li> <li>Another server is added to 30-74</li> <li>Some of the values are kept on the original server, some of them are moved</li> <li>We can still mathematically decide which server to use by the same math function</li></ul> <p data-svelte-h="svelte-dmnzgp">As mentioned before, a hash is used more often than numeric IDs. By giving some boundaries to the hash (e.g. the highest value it can reach), then you can
spread your servers as much as you want.</p> <p data-svelte-h="svelte-94jhuy">By doing this, we’ve achieved some consistency. We can add or remove servers as we go and not lose the data and keep it fast.</p> <h2 data-svelte-h="svelte-zjvna5"><a href="#even-distribution">Even distribution</a><span id="even-distribution"></span></h2> <p data-svelte-h="svelte-e8ekbb">So, we have 5 servers. But now, we’re just hoping that our hash function generates roughly same results. Because it can be the case that 90 % of
the values fall into one server, which is something we do not want.</p> <p data-svelte-h="svelte-7fl9l9">Keep in mind that on the ring, we have each server on the ring. But these servers are not really in circles, it’s just an abstract concept.</p> <p data-svelte-h="svelte-1x5grtc">So, what we’re saying is - We allocate a range of hashes to a specific physical server. It just happens to be a single range. What if we added multiple ranges?</p> <p data-svelte-h="svelte-43y37s">That concept is called <a href="https://liuzhenglaichn.gitbook.io/system-design/advanced/consistent-hashing" rel="nofollow">virtual nodes</a>. There are many different vizualizations,
and I found the written one to be easiest.</p> <p data-svelte-h="svelte-qnipuh">Effectivelly, what is happening is we’re gonna assign multiple spaces on the ring to the real servers. So, imagine the circle before, and consider the first server:</p> <ul data-svelte-h="svelte-vwb4oq"><li>Previously, we’ve allocated all at 0-74 to the first server.</li> <li>Now, we’re gonna allocate:<ul><li>0-20 to first server</li> <li>21-40 to second server</li> <li>41-60 to third server</li> <li>61-74 to fourth server</li></ul></li></ul> <p data-svelte-h="svelte-16uqcys">What we’ll do is we basically split the circle into smaller chunks, and allocate the smaller chunks to physical servers. This way, a single
server can have multiple nodes</p> <img src="/images/system-design/node-ring-distribution.png" alt="Ring distribution" title="Ring distribution" class="image" loading="lazy"> <p data-svelte-h="svelte-l600ok">Note that your values when having 10s of millions DAU, you may need something bigger. We could have 10 servers with each having 200 virtual nodes. We just need to tune it properly.</p> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-1q0f44y">In this part, we’ve dealt with consistent hashing and learned how to approach designing consistent data stores across servers.</p> <p data-svelte-h="svelte-j6tw8m">While this was purely for hashes, we’ll see this concept often repeating everywhere, and it’s important to understand this as good as possible</p> <h1 data-svelte-h="svelte-uqufyh"><a href="#references">References</a><span id="references"></span></h1> <ul data-svelte-h="svelte-1pda0km"><li><a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF" rel="nofollow">System Design Interview book</a></li> <li><a href="https://en.wikipedia.org/wiki/List_of_hash_functions" rel="nofollow">List of hashing functions</a></li> <li><a href="https://en.wikipedia.org/wiki/Consistent_hashing" rel="nofollow">Consistent Hashing on Wikipedia</a></li></ul>`;
});
export {
  _5_system_design_consistent_hashing as default
};
