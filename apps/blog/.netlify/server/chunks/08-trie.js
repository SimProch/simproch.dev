import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./08-trie2.js";
const _08_trie = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-6h3bff">The second to last part will be dedicated to Tries. In this part, I’ll trie to explain what are their benefits, and why should
we care about them.</p> <h2 data-svelte-h="svelte-dp3ebx"><a href="#what-is-a-trie">What’s Trie</a><span id="what-is-a-trie"></span></h2> <p data-svelte-h="svelte-cbezr2">Trie is a very specific type of tree that you’ve definitely encountered in some form. Why? Well, not because you’ve worked with
it, no. But because you’ve used something that is built on top of it. Specifically, Google. Or any autocomplete really.</p> <p data-svelte-h="svelte-cq3v3l">Have you ever wondered how autocorrect or autocomplete works? Me neither! Nevertheless, I’ll shove it up your brain so you
will know what’s in your phone!</p> <p data-svelte-h="svelte-1fdx1ar">A Trie is a tree structure ideal for text-based features. Autocomplete and autocorrect are great examples of it.</p> <p data-svelte-h="svelte-1b3br9m">In contrast to other trees, Trie doesn’t have a root. Or rather - the root doesn’t hold a value.</p> <p data-svelte-h="svelte-1v1kvg4">After talking a little about trees already, let’s take a look at a couple words and see how we could make a tree out of it:</p> <ul data-svelte-h="svelte-1ww9a1d"><li>Autocomplete</li> <li>Autocorrect</li> <li>Automaton</li> <li>Algebra</li></ul> <p data-svelte-h="svelte-1imme5f">Now, what can we do with the words? Well, not much actually. Because tries are more about the characters. Now, if you split
it into characters, you may see where I am going:</p> <ul data-svelte-h="svelte-x7gqxx"><li>Autocomplete: a -&gt; u -&gt; t -&gt; o -&gt; c -&gt; o -&gt; m -&gt; p -&gt; l -&gt; e -&gt; t -&gt; e</li> <li>Autocorrect: a -&gt; u -&gt; t -&gt; o -&gt; c -&gt; o -&gt; r -&gt; r -&gt; e -&gt; c -&gt; t</li> <li>Automaton: a -&gt; u -&gt; t -&gt; o -&gt; m -&gt; a -&gt; t -&gt; o -&gt; n</li> <li>Algebra: a -&gt; l -&gt; g -&gt; e -&gt; b -&gt; r -&gt; a</li></ul> <p data-svelte-h="svelte-tmk65e">And from the individual characters, we could build a tree. It’s not complete, or balanced. But it certainly is a tree!</p> <p data-svelte-h="svelte-14ys141">But how would that help us? Well, if we consider google, consider this feature:</p> <ul data-svelte-h="svelte-1pro9ck"><li>Autocomplete returns top 10 most searched items based on what user is typing</li></ul> <p data-svelte-h="svelte-164bt6w">Now, that’s great! But how would we know where to filter? We could send this to DB and fetch:</p> <pre class="language-sql"><!-- HTML_TAG_START -->${`<code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> autocomplete <span class="token keyword">where</span> query <span class="token operator">like</span> <span class="token string">'&#123;myQuery&#125;%'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token keyword">asc</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1ms3vf4">But that would be searching across all queries, not to mention the system design issues if you have multiple databases.</p> <p data-svelte-h="svelte-11xwkyb">We could use a trie for that instead.</p> <ul data-svelte-h="svelte-12ccrn1"><li>Whenever a user is typing, only navigate through the tree, effectively removing A LOT of other options</li></ul> <p data-svelte-h="svelte-w48w2l">Now, as for the top 10 most searched, we could keep these cached:</p> <ul data-svelte-h="svelte-17uz7ya"><li>When user types “auto”, based on analytics, we may know that:<ul><li>“autocorrect” was searched for 100 times</li> <li>“autocomplete” was searched for 50 times</li> <li>“automaton” was searched for once</li> <li>We would cache these results in the nodes</li></ul></li></ul> <p data-svelte-h="svelte-1f6fwz4">But I’m getting ahead of myself. It’s better described in the following image:</p> <img src="/images/data-structures-and-algorithms/trie_example.png" alt="Trie Example" title="Trie Example" class="image" loading="lazy"> <p data-svelte-h="svelte-18w5knl">Note that each leaf has a value that’s associated with it. We could have this value cached on individual nodes level:</p> <ul data-svelte-h="svelte-10ou97v"><li>The top 2 searched for “t” node would be cached “to” and “ten”</li></ul> <p data-svelte-h="svelte-1brbwtd">Anyways, let’s build a Trie!</p> <h2 data-svelte-h="svelte-1nx0583"><a href="#operations">Operations</a><span id="operations"></span></h2> <p data-svelte-h="svelte-1r1bsjj">Trie has the following operations in the simplest form:</p> <ul data-svelte-h="svelte-15vhhw3"><li>insert</li> <li>search</li></ul> <p data-svelte-h="svelte-1r6ssv5">There is no deletion or traversing, because they don’t make sense. We don’t want to remove previously created words,
neither do we want to go through all of them.</p> <ul data-svelte-h="svelte-t54agt"><li>For searching, an input will be a word (or a partial word) to search for<ul><li>We will iterate over input string and move down the trie as long as there are nodes</li></ul></li> <li>For inserting, an input is again a word<ul><li>We’ll go through the word, creating a trie node if it doesn’t exist</li></ul></li></ul> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">&#123;</span>
    children <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span>
    rootNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> char <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">)</span> currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> currentNode<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rootNode<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> char <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">)</span> currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> currentNode<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-dlxaos">Now, if you look at the insertion, there’s one more thing - ”*“. That’s because it means there can be any words after this.
We don’t keep the entire dictionary somewhere, and new words are always being made up. That basically implies it.</p> <p data-svelte-h="svelte-9q0rvx">And we’re done with Trie. Kind of. We’ve created all the operations. Now, everything is depending on the use cases.</p> <h2 data-svelte-h="svelte-1a79sk1"><a href="#autocomplete">Autocomplete</a><span id="autocomplete"></span></h2> <p data-svelte-h="svelte-1dpmkvl">I’ve mentioned on the start that it’s good for text-based features. Let’s create autocomplete together.</p> <p data-svelte-h="svelte-3k8ftg">Autocomplete with Tries is fairly simple:</p> <ul data-svelte-h="svelte-61xer2"><li>We get a partial word from the user</li> <li>We’ll return to him words already typed in our autocomplete</li></ul> <p data-svelte-h="svelte-1iirg71">So, consider the following:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'catnip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'catnap'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'ace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">'act'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1ghpsaw">We have a trie that has some words in it. Now, let’s consider we want an autocomplete:</p> <ul data-svelte-h="svelte-acytzv"><li>When we type in <code>ca</code>, we’ll receive an array of <code>cat, catnip, catnap</code></li> <li>When we type in <code>ac</code>, we’ll receive an array of <code>ace, act</code></li></ul> <p data-svelte-h="svelte-19pgjq7">So, what we need to do is create a function that retrieves these words.</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">getAllPossibleWords</span><span class="token punctuation">(</span>node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> word <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> currentNode <span class="token operator">=</span> node <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">const</span> children <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span> words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllPossibleWords</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> word <span class="token operator">+</span> key<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> words<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-3xsc88">Now, here we are using recursion on the Trie.</p> <ul data-svelte-h="svelte-fxyll6"><li>We receive a specific node on which we are searching for</li> <li>We pass the partial word down</li> <li>We fill the passed array with all complete words</li> <li>If the key is a star, then we’ll return the word as is (as there are no children under star)</li></ul> <p data-svelte-h="svelte-1puqmdy">And now, autocomplete is simple. We’ll just combine functions we already have:</p> <ul data-svelte-h="svelte-501yuy"><li>we search for the node based on text</li> <li>we receive the word from the user</li> <li>we fill all possible words using the above function</li></ul> <p data-svelte-h="svelte-1d46pdq">So, it’ll look like this:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">autocomplete</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllPossibleWords</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-19pqxxf">And that’s it for autocomplete!</p> <p data-svelte-h="svelte-xlqkwb">Autocorrect will be pretty much the same thing, except:</p> <ul data-svelte-h="svelte-1j9zusz"><li>We have a word we want to correct</li> <li>We want to find the closest match</li></ul> <p data-svelte-h="svelte-1evrjve">So, to do so, we could do:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">autocorrect</span><span class="token punctuation">(</span><span class="token parameter">toCorrect</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>toCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> toCorrect<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        toCorrect <span class="token operator">=</span> toCorrect<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> toCorrect<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>toCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAvailableWords</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> toCorrect<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-19blir1">With the above function, we’ll search if the word we want to correct exists. If not, we’ll progressively move to the top.</p> <p data-svelte-h="svelte-tblp5">This will be result in <code>catp</code> being shortened to <code>cat</code>, searched for, and then returned!</p> <h2 data-svelte-h="svelte-16swnwo"><a href="#code">Code</a><span id="code"></span></h2> <p data-svelte-h="svelte-1boaxsy">The code written here in total is:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">&#123;</span>
  children <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span>
  root<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> char <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">)</span> node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> char <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      node <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>char<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">autocomplete</span><span class="token punctuation">(</span><span class="token parameter">word</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllPossibleWords</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">getAllPossibleWords</span><span class="token punctuation">(</span>node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> word <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> currentNode <span class="token operator">=</span> node <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
    <span class="token keyword">const</span> children <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span> words<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAllPossibleWords</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> word <span class="token operator">+</span> key<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> words<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"catnip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"catnap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"ace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"act"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
trie<span class="token punctuation">.</span><span class="token function">autocomplete</span><span class="token punctuation">(</span><span class="token string">"ac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-bjf5nc">Feel free to play around with it!</p> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-h11b96">In this piece, I’ve gone through tries. A third data structure we’ve discovered after binary search trees and heaps.</p> <p data-svelte-h="svelte-1wbpw0o">Tries are very solid data structure that can be used in many text-based features.</p> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-13psg4z"><li><a href="https://www.amazon.com/Common-Sense-Guide-Data-Structures-Algorithms/dp/1680502441" rel="nofollow">A Common-Sense Guide to Data Structures and Algorithms</a></li> <li><a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow">Trie</a></li></ul>`;
});
export {
  _08_trie as default
};
