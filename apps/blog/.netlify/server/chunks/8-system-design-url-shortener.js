import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./8-system-design-url-shortener2.js";
const _8_system_design_url_shortener = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-157vr4l">So, this has been fruitful! So far we’ve gone through so much stuff! But before I’ll do a recap of what we’ve learned, let us go
and actually design a tool!</p> <p data-svelte-h="svelte-mvlhwk">So far, we’ve been talking about designs involving algorithms. So let’s go back a bit and design a complete system from scratch!</p> <p data-svelte-h="svelte-kbhps8">This time, we’ll be taking a look at a URL shortener, trying to reuse some of the topics we’ve seen so far.</p> <p data-svelte-h="svelte-1ji7i28">So, have you ever wondered how to create your own <a href="https://tinyurl.com/" rel="nofollow">tinyurl</a>? You’ve come to the right place.</p> <h2 data-svelte-h="svelte-7xgcga"><a href="#define-a-scope">Defining a scope</a><span id="define-a-scope"></span></h2> <ul data-svelte-h="svelte-q49e7d"><li>Any URL entered into the form and shortened can be sent to someone else and it opens on the same page</li> <li>This includes all query and route parameters</li> <li>100 millions URLs are generated per day</li> <li>The URL is as short as possible</li> <li>The characters in the URL are <code>[0-9]</code>, <code>[a-z]</code> and <code>[A-Z]</code></li> <li>The URL can’t be neither updated or deleted</li> <li>The service will be running for 10 years</li></ul> <h2 data-svelte-h="svelte-2a6rwt"><a href="#bote">Back-of-the-envelope</a><span id="bote"></span></h2> <p data-svelte-h="svelte-xwe8il">So, we’ve defined a scope. Now, let’s try to estimate a little!</p> <ul data-svelte-h="svelte-mbifu2"><li>100 millions URLs per day means 36.5 billions per year, 365 billions in 10 years</li> <li>Average URL is 100 bytes long</li> <li>365 billions * 100 bytes ~ 36.5 trillion ~ 36.5 TB storage</li></ul> <p data-svelte-h="svelte-192qnoq">That’s for storage. Now, 100 millions URLs are created per day. That means 100 millions of writes.</p> <ul data-svelte-h="svelte-tudvau"><li>When a URL is created once, every subsequent creation is actually a read as it’s been generated</li> <li>There will be way less writes than reads</li> <li>Let’s say the ratio of reads will be 10 reads to 1 write.</li></ul> <p data-svelte-h="svelte-pncvt7">To get QPS:</p> <ul data-svelte-h="svelte-9dwbyi"><li>100 millions / (60 <em>60</em> 24) ~ 1160 writes per second</li> <li>10 : 1 read/write ratio =&gt; ~ 11600 reads per second</li></ul> <p data-svelte-h="svelte-183rza">So, to recap:</p> <ul data-svelte-h="svelte-1utmd"><li>36.5 TB storage</li> <li>1160 writes per second</li> <li>11600 reads per second</li></ul> <p data-svelte-h="svelte-nr4iwp">Now, the URL needs to be as small as possible.</p> <ul data-svelte-h="svelte-6t1dr6"><li>The total amount of URLs is 365 billions</li> <li>The charset available is <code>[0-9]</code>, <code>[a-z]</code> and <code>[A-Z]</code></li> <li>There are 26 chars between a-z, meaning (2 * 26 + 10) = 52 + 10 = 62</li> <li>We are using base 62 encoding</li></ul> <p data-svelte-h="svelte-1voy6vr">From there, we can calculate the maximum size of the short URL.</p> <ul data-svelte-h="svelte-1dkjewj"><li>62^n is less than 365 billions =&gt; log(62) 365 billions =&gt; 6.5</li> <li>We round up because we’re defining number of characters =&gt; 7</li> <li>The shortened URL size will be 7 characters</li></ul> <h2 data-svelte-h="svelte-93mahg"><a href="#high-level">High-Level Design</a><span id="high-level"></span></h2> <p data-svelte-h="svelte-1my7zs5">So, we’re gonna do a URL shortener. Well, it’s basically 2 endpoints:</p> <ul data-svelte-h="svelte-2wmeid"><li>my-url-shortener.com/api/shorten</li> <li>my-url-shortener.com/api/<code>{shortUrl}</code></li></ul> <p data-svelte-h="svelte-c0ena3"><strong>shorten</strong> endpoint:</p> <p data-svelte-h="svelte-1mvdu6w">The shorten endpoint will basically take a long URL that will be processed, and returns a short URL</p> <ul data-svelte-h="svelte-eqjcid"><li>POST request with <code>longUrl: string</code> body</li> <li>Returns <code>shortUrl: string</code></li> <li>Somewhere in the backend generates and saves the shortUrl</li></ul> <p data-svelte-h="svelte-1i1cqsc">And that’s it for this one. For the other endpoint, it’s more complicated</p> <p data-svelte-h="svelte-1wpiaom"><strong><code>{shortUrl}</code></strong> endpoint</p> <p data-svelte-h="svelte-hffzah">This is the one where a lot of the magic happens to the user. Because what we need to do here is force a redirect.</p> <p data-svelte-h="svelte-5l70h3">Luckily, there are some HTTP Codes that allow for it:</p> <ul data-svelte-h="svelte-1vwitsc"><li><a href="https://en.wikipedia.org/wiki/HTTP_301" rel="nofollow">HTTP 301</a><ul><li>301 Moved Permanently</li> <li>Used for permanent redirecting</li> <li>Used e.g. when using http -&gt; https</li> <li>Redirects the user to a <code>Location</code> (in response headers)</li></ul></li> <li><a href="https://en.wikipedia.org/wiki/HTTP_302" rel="nofollow">HTTP 302</a><ul><li>302 Found</li> <li>Also defined as <code>302 Moved Temporarily</code></li> <li>Redirects the user to a <code>Location</code> (in response headers)</li></ul></li></ul> <p data-svelte-h="svelte-1oszyn">Now, the main difference between these two is that once <strong>301</strong> is returned the first time, it will no longer send the request to our shortening service directly.
That’s what permanently means - it caches the last result of this call and returns it right away.</p> <p data-svelte-h="svelte-wwuxla">With the <strong>302</strong>, the calls are still made to our service.</p> <p data-svelte-h="svelte-y3rbpr">Again, it doesn’t mean that one is worse than another</p> <ul data-svelte-h="svelte-8qx27m"><li>If reducing server load is priority, use HTTP 301</li> <li>If analytics is important, use HTTP 302 as you catch all requests</li></ul> <p data-svelte-h="svelte-2hgndw">Now, what if the shortUrl doesn’t exist yet? Well, we can just return 404 as no such shortUrl yet exists.</p> <h2 data-svelte-h="svelte-4n91z0"><a href="#deep-dive">Deep-dive</a><span id="deep-dive"></span></h2> <p data-svelte-h="svelte-7naigm">So, going deeper to the shortener, we’ll need to think a little about the shortening itself.</p> <p data-svelte-h="svelte-1y9jeu8">Now, there are a bunch of IDs that we can use for generating. In the previous chapter, we’ve mentioned UUIDs. But I’ve also tackled this topic here already.</p> <p data-svelte-h="svelte-8xcznx">Since the requirement is as short as possible, in the <a href="#bote">BOTE</a> part, I’ve mentioned base 62 and 7 characters.</p> <p data-svelte-h="svelte-re3onj">So, we’ll be using base 62. And how are we going to generate it? Well, we’ll have to use something. For simplicity, I’ll be using autoincrement
in this section, so we can expect every new URL to be sent here to be incremented by a single ID. I also know that this isn’t the best approach as
discussed in previous chapter. We could generate a new ID multiple ways and then convert that to base 62, but for simplicity, let’s not.</p> <p data-svelte-h="svelte-ys1q6m">So, considering autoincrement, all new URLs to be generated will be increased by 1 in terms of ID. So how do we generate the ID for shortening service?</p> <p data-svelte-h="svelte-5hj33v">Well, we’ll convert it to base62:</p> <ul data-svelte-h="svelte-nqrn1c"><li>The number 10 in base 2 is <code>1010</code><ul><li>1 <em>2^3 + 0</em> 2^2 + 1 <em>2^1 + 0</em> 2^0 =&gt; 8 + 0 + 2 + 0 =&gt; 10</li></ul></li> <li>The number 10 in base 10 is <code>10</code><ul><li>1 <em>10^1 + 0</em>10^0 =&gt; 10 + 0 =&gt; 10</li></ul></li> <li>Same goes for any other base. For base 16, let’s consider <code>FF</code><ul><li>F is the last number (and base 16 goes from 0-15), so F is 15</li> <li>15 <em>16^1 + 15</em> 16^0 = 240 + 15 = 255</li></ul></li> <li>Doing the same approach, we can say the <code>Z</code> is <code>61</code> because <code>Z</code> is <code>61 * 62^0</code></li></ul> <p data-svelte-h="svelte-143fk6d">So, this is how we will shorten the URL.</p> <p data-svelte-h="svelte-1s8cccf">Now, we know what endpoints we will have. How will they look on the inside?</p> <p data-svelte-h="svelte-1wpiaom"><strong><code>{shortUrl}</code></strong> endpoint</p> <p data-svelte-h="svelte-1atkgy4">This one is fairly straightforward.</p> <ul data-svelte-h="svelte-1dzv63u"><li>Find in DB if there is an item with <code>{shortUrl}</code></li> <li>If there is, return HTTP Code 301 with Location: <code>{longUrl}</code></li> <li>If there is not, return HTTP Code 404</li></ul> <p data-svelte-h="svelte-1cf9a2l">So it’s basically a read operation! But - how will the write happen?</p> <p data-svelte-h="svelte-c0ena3"><strong>shorten</strong> endpoint:</p> <p data-svelte-h="svelte-cofufr">We know that user sends us the URL he wants to shorten. So, what will need to happen is basically:</p> <ul data-svelte-h="svelte-1lxnhbe"><li>longUrl -&gt; <code>shorten()</code> -&gt; save -&gt; return shortUrl</li></ul> <p data-svelte-h="svelte-7r3623">But, what if the URL has already been shortened? Well, we need to check for it first!</p> <ul data-svelte-h="svelte-1nvcb8z"><li>longUrl -&gt; isInDB()<ul><li>if true: return shortUrl from DB</li> <li>if false: <code>shorten()</code> -&gt; save -&gt; return shortUrl</li></ul></li></ul> <p data-svelte-h="svelte-16ipfc7">And the shorten itself? Well, as described above:</p> <ul data-svelte-h="svelte-hnc2ni"><li>get count of DB items</li> <li>create ID with <code>id = count + 1</code></li> <li>create base62 representation from ID</li> <li>save <code>id</code>, <code>shortUrl</code> and <code>longUrl</code> to database</li></ul> <h2 data-svelte-h="svelte-hh28lx"><a href="#performance">Performance</a><span id="performance"></span></h2> <p data-svelte-h="svelte-mimgye">So, we have:</p> <ul data-svelte-h="svelte-kc4lnq"><li>API endpoints</li> <li>Shortening function</li> <li>DB schema</li> <li>Overview of how it’s all gonna work</li></ul> <p data-svelte-h="svelte-b4jmy7">Now, what about the performance? Well, there are 2 issues here:</p> <p data-svelte-h="svelte-vodjw9">In distributed environment (which this definitely will be with 100 millions URLs being generated daily), we have to account for distributed ID generation</p> <p data-svelte-h="svelte-aozvfr">The second thing is getting fast responses. This would be solved by using content delivery network/edge servers, load balancer, multiple servers, as well as caching and database</p> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-1fo7my5">So, in this chapter, we’ve gone through URL shortener</p> <ul data-svelte-h="svelte-1hq0s28"><li>We’ve gone through API endpoints</li> <li>We’ve gone through shortening of the URL and creating own hashing</li> <li>We’ve gone through the database schema</li></ul> <p data-svelte-h="svelte-o3tnii">The things that would need more thought are again</p> <ul data-svelte-h="svelte-y5w4gk"><li>Adding rate limiters</li> <li>Faster responses by adding multiple servers and caching</li> <li>Distributed ID generation due to multiple servers</li> <li>CDN/Edge servers</li> <li>And more</li></ul> <p data-svelte-h="svelte-zqdpdy">Now, also we might want to think more about other things</p> <ul data-svelte-h="svelte-bh4gmr"><li>DB scaling</li> <li>Analytics, monitoring</li> <li>Availability, consistency, reliability</li></ul> <p data-svelte-h="svelte-1d9s862">We’ve to an extent discussed all the individual parts of this. This is some space for your own thoughts.
Chances are, if you made it here, it won’t be wrong.</p> <h1 data-svelte-h="svelte-uqufyh"><a href="#references">References</a><span id="references"></span></h1> <ul data-svelte-h="svelte-ns3uzt"><li><a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF" rel="nofollow">System Design Interview book</a></li> <li><a href="https://tinyurl.com/" rel="nofollow">tinyurl</a></li> <li><a href="https://en.wikipedia.org/wiki/HTTP_301" rel="nofollow">HTTP 301</a></li> <li><a href="https://en.wikipedia.org/wiki/HTTP_302" rel="nofollow">HTTP 302</a></li></ul>`;
});
export {
  _8_system_design_url_shortener as default
};
