import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./16-system-design-afterword2.js";
const _16_system_design_afterword = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-1rd1p1c">So, we did it. Together we’ve gone through a massive book and I tried to explain it using my own words.</p> <p data-svelte-h="svelte-b52lw1">We’ve gone through a lot of stuff.</p> <ul data-svelte-h="svelte-1boq829"><li>From rate limiting and a lot of algorithms</li> <li>Through consistent hashing and creating own ID creation in distributed ID generation and URL shortening</li> <li>Through notification and chat services, using third party APIs and websockets</li> <li>Through web crawlers, understanding processing of a lot of data</li> <li>Learning new data structures with autocomplete</li> <li>And finally, doing a lot of compression and block separation in google drive and youtube</li></ul> <p data-svelte-h="svelte-p5unx2">We’ve done a lot. Now, I’d like to go back a little.</p> <p data-svelte-h="svelte-1kclaca">You may see a lot of images. Those are from the book I’ve listed in each reference. While I did not cite it word by word, I went
a lot with the context it has and tried to put it for my own understanding.</p> <p data-svelte-h="svelte-afeqao">Some pictures come from a course that - at least first 15 parts - are same as in the book. Visit <a href="https://bytebytego.com/courses/system-design-interview/foreword" rel="nofollow">ByteByteGo</a>
to learn more about it.</p> <p data-svelte-h="svelte-85jatk">Now, I’d like to reiterate on the concepts we’ve seen many times:</p> <ul data-svelte-h="svelte-zklazg"><li>Load Balancers and multiple servers to distribute load</li> <li>Multiple databases, sharding, unique ID generation</li> <li>Graceful error repair, such as handling request by different server, or different DB</li> <li>A lot of redundancy in order to keep the data</li> <li>Having multiple write servers and read servers, depending on app usage</li> <li>Using cache because it’s fast</li> <li>Using CDN because it’s fast, but potentially also costly</li> <li>Message queues for more decoupled system</li> <li>Logging, metrics, analytics</li> <li>Vertical and horizontal scaling (add more resources VS add more servers)</li></ul> <p data-svelte-h="svelte-i07v52">That was a lot to cover. These are just to name a few.</p> <p data-svelte-h="svelte-jbpnme">Now, during my time here, perhaps the most recurring concept was Back of the Envelope Estimation. Here are a couple of mnemonics to go by:</p> <p data-svelte-h="svelte-16ygvsj">One that was a lot used was powers of two:</p> <table data-svelte-h="svelte-1vwdivw"><thead><tr><th>Power</th> <th>Value</th> <th>Full name</th> <th>Short Name</th></tr></thead> <tbody><tr><td>10</td> <td>Thousand</td> <td>Kilobyte</td> <td>KB</td></tr> <tr><td>20</td> <td>Million</td> <td>Megabyte</td> <td>MB</td></tr> <tr><td>30</td> <td>Billion</td> <td>Gigabyte</td> <td>GB</td></tr> <tr><td>40</td> <td>Trillion</td> <td>Terabyte</td> <td>TB</td></tr> <tr><td>50</td> <td>Quadrillion</td> <td>Petabyte</td> <td>PB</td></tr></tbody></table> <p data-svelte-h="svelte-ojgri6">Now, what’s a good mnemonic for this if you don’t want to remember it? For me, Million worked best:</p> <ul data-svelte-h="svelte-3ycge4"><li>5 million DAU</li> <li>10 % of users store 100kB of Data</li> <li>5 million times 0.1 times 100kB<ul><li>Now here, I’m working with <code>MB</code>. The mnemonic that worked for me is that both million and megabyte start with <code>M</code></li> <li>For easy computation:<ul><li>5 000 000 * 0.1 = 500 000 (remove one zero)</li> <li>100kB =&gt; 500 000 * 100 =&gt; 50 000 000kB (add 2 zeroes)</li> <li>Daily stored data = 50 000 000 kB =&gt; 50 000 MB =&gt; 50 GB (remove 3 zeroes per each)</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-18tqwgp">Now, we’ve often discussed about seconds. Specifically, queries per second. Now, let’s take a look at that!</p> <ul data-svelte-h="svelte-4qav74"><li>5 million DAU =&gt; 5 000 000 / 24 / 60 / 60 (or 5 000 000 / (24 <em>60</em> 60))</li> <li>A good mnemonic here is look at what the result of the multiplication is<ul><li>24 <em>60</em> 60 = 86400</li> <li>N / 86400 ~= N / 100 000 * 1.2</li></ul></li> <li>The real result of 5 million DAU for QPS is 57</li> <li>The approximate result is 5 000 000 / 100 000 <em>1.2 ~= 50</em> 1.2 ~= 60</li></ul> <p data-svelte-h="svelte-fdf32b">This approximation is good enough for most of the use cases, and it’s easier for our brain to do this computation</p> <p data-svelte-h="svelte-167i9yu">Let’s take this exactly from the book again:</p> <ul data-svelte-h="svelte-1ktenz2"><li>300 million monthly active users</li> <li>50 % use twitter daily</li> <li>User post twice a day</li> <li>10 % of the tweets contain media</li> <li>The data is stored for 5 years</li></ul> <p data-svelte-h="svelte-1d5s75i">So, QPS here is 3472:</p> <ul data-svelte-h="svelte-16u1k4b"><li>300 000 000 <em>0.5</em> 2 = 300 000 000</li> <li>QPS is 300 000 000 / 100 000 <em>1.2 ~= 3000</em> 1.2 ~= 3600</li></ul> <p data-svelte-h="svelte-1urwcdw">(You can get the same result with 1.1574 as with the real QPS, but it’s still harder to process in head)</p> <p data-svelte-h="svelte-1ydjbv5">And now, finally, when on an interview</p> <ul data-svelte-h="svelte-f5yat0"><li>Ask for clarifications. Know the important features. Chances are, each feature will have a different service and you’d share storage</li> <li>A lot of the requirements were given by me. But they are a result of discussion with the interviewer</li></ul> <p data-svelte-h="svelte-13i98y2">Hope that helped. Good luck and thanks for being here with me!</p> <h1 data-svelte-h="svelte-uqufyh"><a href="#references">References</a><span id="references"></span></h1> <ul data-svelte-h="svelte-l6ib45"><li><a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF" rel="nofollow">System Design Interview book</a></li> <li><a href="https://bytebytego.com/courses/system-design-interview/foreword" rel="nofollow">ByteByteGo</a></li></ul>`;
});
export {
  _16_system_design_afterword as default
};
