import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./04-recursion2.js";
const _04_recursion = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-1do3lzk">When coding, one of the things we can often use is recursion. I’ve mentioned before fibonacci numbers, but there are quite a few algorithms that
require recursion. One of them is <a href="https://en.wikipedia.org/wiki/Quicksort" rel="nofollow">QuickSort</a>, but we’ll find a bunch of them in here.</p> <h2 data-svelte-h="svelte-1nkc6t1"><a href="#what-is-recursion">What is Recursion</a><span id="what-is-recursion"></span></h2> <p data-svelte-h="svelte-15goz1r">Recursion means <a href="https://users.cs.utah.edu/~germain/PPS/Topics/recursion.html" rel="nofollow">defining a problem in terms of itself</a>. Now, if you’re like me,
you probably have no idea what that means.</p> <p data-svelte-h="svelte-1aqyd68">So, let’s use an example to explore it:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">recursion</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-ypyfn8">If you’d run to above program, you’ll get an error saying</p> <blockquote data-svelte-h="svelte-1oefhl"><p>Uncaught RangeError: Maximum call stack size exceeded</p></blockquote> <p data-svelte-h="svelte-14uxffp">But that’s okay! Because it’s pretty much the same as calling an infinite loop, except individual calls are added onto <a href="https://en.wikipedia.org/wiki/Call_stack" rel="nofollow">Call Stack</a>.</p> <p data-svelte-h="svelte-r6uljo">At some point, the computer decides that this is getting anywhere and it’s wasting resources, so it’s gonna kill the program. That’s not exactly what happens,
as call stack has a limit and it’s reached, but this is enough explanation to give an idea.</p> <p data-svelte-h="svelte-65krrd">To deal with this, we’d need to define a so-called <strong>base case</strong>.</p> <p data-svelte-h="svelte-j395sm"><strong>Base case</strong> in recursion is the point when your code hits the bottom. Consider the following code:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-rbukjs">In the above fibonacci calculator, there is no base case. There is no point when we say “Hey, stop right here, this is enough”. Without <strong>base case</strong>,
our program would keep running until we received the error above. So, let’s fix that!</p> <p data-svelte-h="svelte-fjtdgg">We know that for the 0th and 1st fibonacci number, we need to return the number 1. So, let’s do that!</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1nsu01e">The first line of code inside the function is the <strong>base case</strong>. It is the point where you no longer call recursion. If you don’t define base case, you’ll kill your program.</p> <p data-svelte-h="svelte-1725at8">So, with that in our mind, we can now use recursion. Some every day example could be flattening an array:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">flatten</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">arr</span><span class="token operator">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> result<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// [1,2,3,4,5,...,16]</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1s01ayx">With the above code, we’re able to flatten an array using recursion! The base case is when <code>Array.isArray == false</code>. If the element is not an array,
we’ll not call the <code>flatten</code> function and just perform the operations.</p> <h2 data-svelte-h="svelte-76udnv"><a href="#using-recursion">Using recursion</a><span id="using-recursion"></span></h2> <p data-svelte-h="svelte-hfayfi">One thing to note is that we can use recursion everywhere. Is it a good idea? Probably not. But it certainly is <strong>an</strong> idea.</p> <p data-svelte-h="svelte-1c35egs">This section is mostly to understand that we can do that. Consider that you have a task to get a sum of letters in an array. Well, what you’d probably do is:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ab'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'ghij'</span><span class="token punctuation">]</span> 
<span class="token keyword">const</span> <span class="token function-variable function">getNumberOfChars</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getNumberOfChars</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 10</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-l6rdtj">Now, how would we do that with recursion? Well, we need to work with the strings from the inside!</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">getNumberOfChars</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">stringOrArray</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stringOrArray<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stringOrArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token function">one</span><span class="token punctuation">(</span>stringOrArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-11cb3b">Is it simpler than above? No. But we can use it. The benefit of this is that sometimes, it’s easier to write
recursive code for algorithms, sometimes it is not, but you can use it for almost anything.</p> <p data-svelte-h="svelte-2tnhy">To showcase one where it’s actually way easier to use recursion, let’s consider the following setup:</p> <blockquote data-svelte-h="svelte-mzbthw"><p>Have a grid of rows and columns
Write a function that accepts number of rows and number of columns
Function calculates the number of paths from top-left to bottom-right
The only permitted moves are left and right</p></blockquote> <p data-svelte-h="svelte-5prno0">Now, to write this code without recursion, let’s do just that:</p> <ul data-svelte-h="svelte-11coodw"><li>Create matrix</li> <li>Find path from top-left to bottom-right</li> <li>Allow only moving left and right</li> <li>Get number of paths followed</li></ul> <p data-svelte-h="svelte-1okoic">But when you think about it a little more, you’ll find that the “have a grid” means nothing. It’s actually just a clever wordplay. You’d probably
end up with something like:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token parameter">cols<span class="token punctuation">,</span>rows<span class="token punctuation">,</span>result <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> cols <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">_</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> rows<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        result<span class="token operator">++</span> <span class="token comment">// increment when bottom case is it</span>
        <span class="token keyword">return</span> results<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token function">five</span><span class="token punctuation">(</span>cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> result <span class="token operator">=</span> <span class="token function">five</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-171jtxn">The reason why the array doesn’t make sense there is:</p> <ul data-svelte-h="svelte-1qs7fli"><li>it is unused in the code</li> <li>we’re working with “abstract” grid. We don’t ever need to create it. We can cleverly work with indices only</li></ul> <p data-svelte-h="svelte-pbqple">Eventually, after inspecting it, you’ll find out 2 things:</p> <ul data-svelte-h="svelte-1fhpl4t"><li>Whenever I hit the end, I increment by 1</li> <li>From the parent tree, I just want to account for this addition</li> <li>I don’t need to pass the result down the tree because I’m always overwriting it</li></ul> <p data-svelte-h="svelte-41lxwg">So, you’d get somewhere like:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token parameter">cols<span class="token punctuation">,</span>rows<span class="token punctuation">,</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> rows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">five</span><span class="token punctuation">(</span>cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token function">five</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1hlgx79">So that looks better. But now we’ll notice a strange thing! Because the moment you hit an edge (col = 1 OR row = 1), it’s
the same as if both hit the edge (you got bottom right). Why? Well, because at that point, there’s only one way forward</p> <ul data-svelte-h="svelte-vzdcgl"><li>If you’ve hit bottom, the only way is right -&gt; there’s only 1 way to finish it</li> <li>If you’ve hit right, the only way is down -&gt; there’s only 1 way to finish it</li></ul> <p data-svelte-h="svelte-q5t97q">So, finally, the initial condition will be <code>cols == 1 || rows == 1</code>. Which is the opposite of the next 2 checks. So, we’ll simplify it to:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token parameter">cols<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> rows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  res <span class="token operator">+=</span> <span class="token function">five</span><span class="token punctuation">(</span>cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res <span class="token operator">+=</span> <span class="token function">five</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1jn0gfu">And finally, now we can see what’s up. We can completely remove the <code>res</code>.</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token parameter">cols<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> cols <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">five2</span><span class="token punctuation">(</span>rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cols<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">five2</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token parameter">cols<span class="token punctuation">,</span>rows</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> cols <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">five2</span><span class="token punctuation">(</span>rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> cols<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">five2</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> cols <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-54zwpm">Now, go back up and see what changed. Instead of a long function, we’ve managed to simplify it to 2 lines of code by throwing away the unneeded stuff.</p> <p data-svelte-h="svelte-3yk1ni">And this is where recursion especially shines. Either traversing or clever play with indices.</p> <h2 data-svelte-h="svelte-12k5s4p"><a href="#memoization">Memoization</a><span id="memoization"></span></h2> <p data-svelte-h="svelte-9msz57">So, we’ve seen a bunch of examples. Recursion can be really useful and potentially fast. But let’s rewind a bit.</p> <p data-svelte-h="svelte-12cscxz">I’ve mentioned fibonacci sequence before. Let’s revisit that code:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-bxud71">A simple function that adds two numbers, right? Now, let’s look at the complexity. Consider you pass the number 5 to it.</p> <ul data-svelte-h="svelte-kb2gd7"><li>fib(5) = fib(4) + fib(3)</li> <li>fib(4) = fib(3) + fib(2)</li> <li>fib(3) = fib(2) + fib(1)</li> <li>fib(2) = fib(1) + fib(0)</li> <li>fib(1) = 1</li> <li>fib(0) = 1</li></ul> <p data-svelte-h="svelte-649d08">Great. We got it. But let’s try to put it into a single line!</p> <ul data-svelte-h="svelte-1sg557c"><li>fib(5) = fib(4) + fib(3)</li> <li>fib(5) = fib(3) + fib(2) + fib(3)</li> <li>fib(5) = fib(2) + fib(1) + fib(1) + fib(0) + fib(2) + fib(1)</li> <li>…</li></ul> <p data-svelte-h="svelte-8d8ocm">You get the idea. Upon inspection, we’ll find that we are calling a lot of unnecessary functions - or at least those we’ve already called.</p> <p data-svelte-h="svelte-1rzg8ds">To make this faster, we’ll use a technique called <strong>memoization</strong>. Basically, it’s caching already calculated results. Consider the following:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-pvsrg6">Then to simplify it:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">fib</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-ju4t11">Now, here we’ve actually used 2 things so far! A hash map and recursion! And we’ve sped it up a lot! Because now, once it’s already calculated
any fibonacci number below, it’ll be cached and all subsequent calls will be fast!</p> <h2 data-svelte-h="svelte-116fnl7"><a href="#speeding-up-with-recursion">Speeding up with recursion</a><span id="speeding-up-with-recursion"></span></h2> <p data-svelte-h="svelte-q4kx6w">So, we understand recursion now. We also understand memoization. Now, let’s try to speed some things up!</p> <p data-svelte-h="svelte-1og8a62">In this part, we’ll go through 2 parts:</p> <ul data-svelte-h="svelte-xfn00o"><li><a href="https://en.wikipedia.org/wiki/Quicksort" rel="nofollow">Quicksort</a></li> <li><a href="https://en.wikipedia.org/wiki/Quickselect" rel="nofollow">Quickselect</a></li></ul> <p data-svelte-h="svelte-1ai1cla">So, let’s get started with it!</p> <p data-svelte-h="svelte-17hlcfs">I’m going to start with Quickselect, because it’s easier. Now, why would we need it?</p> <p data-svelte-h="svelte-y49grs">We’ve already talked about sorted and unsorted arrays. Imagine you need to retrieve the 7th lowest number in an array. Well, that’s easy!</p> <ul data-svelte-h="svelte-1w2f50e"><li>Sorted array ascending - select element on 6th index</li> <li>Unsorted array - sort and perform previous line</li> <li>…Or do you?</li></ul> <p data-svelte-h="svelte-1jd8sya">Now, let me first establish some terminology, because this is not searching for 7th lowest element, but rather selecting 7th lowest element.</p> <ul data-svelte-h="svelte-pwnw74"><li>Searching - Search for a truthy condition</li> <li>Selecting - Search Nth element based on condition</li></ul> <p data-svelte-h="svelte-egtzg9">You could argue that selecting is a form of search. That would be true with indexes. To give another example:</p> <ul data-svelte-h="svelte-53aip0"><li>I’m looking for 7th lowest element in an array of 2000 items (who happens to have the number 200)</li> <li>I’m searching for a number 200 in an array</li></ul> <p data-svelte-h="svelte-sym1fh">Now, in this case, they’d both be doing the same thing, but only because the item is same.</p> <ul data-svelte-h="svelte-4yp6dh"><li>I can’t select number 200</li> <li>I can’t search for 7th lowest element</li></ul> <p data-svelte-h="svelte-1nc6l8k">If that wasn’t sufficient, I invite you to read through <a href="https://stackoverflow.com/questions/10863093/difference-between-quickselect-binary-search-selection" rel="nofollow">this SO post</a></p> <p data-svelte-h="svelte-iui72y">And without further ado, let’s get to it.</p> <p data-svelte-h="svelte-1jjhrr9">As mentioned, we want to select nth element from an array. To do so, we’ll be using 2 things:</p> <ul data-svelte-h="svelte-1muys5u"><li>partition (or pivot index)</li> <li>selection</li></ul> <p data-svelte-h="svelte-hgmhmn">The partition part will be used also in quicksort, so do try to keep up! In the simplest terms, it does the following:</p> <ul data-svelte-h="svelte-yz6jb3"><li>pull element at pivot index from array</li> <li>put smaller elements on the left</li> <li>put larget elements on the right</li> <li>replace pivot elements (in 1st step, it was removed, so we put it back into the array)</li></ul> <p data-svelte-h="svelte-1mek75s">Now, once you’ve done that, you should have the element on its position within the array. So, if the first element you pull is the 14th
lowest element, then it will be on the 14th position. If it’s 100th lowest element, it will be on 100th position.</p> <p data-svelte-h="svelte-1s3qh82">And since you know that the lower elements are on the left and larger on the right, you know which way to go. So, you then perform
the same code</p> <ul data-svelte-h="svelte-10g4jfz"><li>If you pulled 14th element and you’re looking for 7th element, you look on the subarray of 0 to 13</li> <li>If you pulled 14th element and you’re looking for 20th element, you look on the subarray 14 to length</li></ul> <p data-svelte-h="svelte-1wmryyg">So this is kinda similar with binary search in a way. So, if we reiterate on the 2 steps before:</p> <ul data-svelte-h="svelte-10x9jba"><li>partition (move smaller to left, larger to right)</li> <li>selection (partition on smaller array using binary search ideas)</li></ul> <p data-svelte-h="svelte-9yd1mw">But how do we put smaller elements on the left and larger on the right?</p> <ul data-svelte-h="svelte-8foura"><li>Any element can be taken as pivot index, but the last element in array is usually used</li> <li>This element is compared to the rest of the array, swapped if needed.</li></ul> <p data-svelte-h="svelte-1ojceml">Now, consider that we have an array <code>[7,10,4,2,3,20,15]</code> and we’re looking for the 2nd smallest element</p> <p data-svelte-h="svelte-1vg4snl">In there, if we pivot around the number <code>15</code>, we’ll find that:</p> <ul data-svelte-h="svelte-1krrs4p"><li>7 is smaller</li> <li>10 is smaller</li> <li>4 is smaller</li> <li>3 is smaller</li> <li>20 is larger -&gt; SWAP THEM</li></ul> <p data-svelte-h="svelte-gnbasu">Now, that’s good, we got <code>15</code> to its correct position. But we had to swap only 2 numbers. Now, let’s do it again:</p> <ul data-svelte-h="svelte-1ksqxtg"><li>We have array <code>[7,10,4,2,3,15,20]</code></li> <li>We know the 2nd smallest element is on the left side</li> <li>We pivot around number 3 the same way as before, we’re gonna swap 7 and 3. But then we’d have to swap 3 and 2. And we’d get nowhere</li> <li>Instead, we will:<ul><li>create a <strong>pivot</strong> index at 0</li> <li>keep in mind that <code>3</code> is our <strong>pivot</strong> number</li> <li>compare if element on index going from start is smaller than our <strong>pivot</strong> number<ul><li>if it is smaller, move it to <strong>pivot</strong> index (0) and increment the index</li> <li>if not, keep as is</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-1qvn17m">So, let’s apply it:</p> <ul data-svelte-h="svelte-1b1od9w"><li>pivot around number 3</li> <li>7 is NOT smaller than our pivot number -&gt; continue</li> <li>10 is NOT smaller than our pivot number -&gt; continue</li> <li>4 is NOT smaller than our pivot number -&gt; continue</li> <li>2 IS smaller than our pivot number -&gt; SWAP with 7 (because 7 is on 0th index)<ul><li>Increment <strong>pivot</strong> index</li></ul></li> <li>3 is our pivot number -&gt; swap with whatever is on <strong>pivot</strong> index (1)</li></ul> <p data-svelte-h="svelte-1luguue">After doing that, we’re left with <code>2, 3, 4, 7, 10</code>. The entire array now is <code>2,3,4,7,10,15,20</code>.</p> <p data-svelte-h="svelte-1rcwgd3">So, a little recap in here:</p> <ul data-svelte-h="svelte-12tt2lp"><li>It doesn’t matter if you pivot from right or left. You have to go through the entire array going TO that index</li> <li>You have to run the code as many times as the number you’re trying to select.<ul><li>The complexity for 8th smallest number is O(8N) -&gt; O(N)</li> <li>It may seem like the complexity to find the largest number is O(N^2) since it’s O(N*N).</li> <li>But not really, because we always halve the array. We’ll always know the half where to look.</li></ul></li></ul> <p data-svelte-h="svelte-j8ity0">So, let’s write code for the partitioning!</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> leftPointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightPointer <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>rightPointer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> leftPointer<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
            <span class="token function">swapArrayElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            pivotIndex<span class="token operator">++</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pivotIndex
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-w85wg6">In the above code, we’ve done the following:</p> <ul data-svelte-h="svelte-lrkazo"><li>We defined a function which takes an array, leftPointer and rightPointer<ul><li>leftPointer is 0 - the starting index of array</li> <li>rightPointer is the length of the array</li></ul></li> <li>We go through the array<ul><li>If the item on current position is smaller or equal than the pivot number, swap the elements</li> <li>smaller than because we want to move all smaller elements first</li> <li>equals so we can move it one last time for the pivot number itself</li></ul></li> <li>Finally, we return the pivotIndex. That is the position.</li></ul> <p data-svelte-h="svelte-1eu02px">If we run the function once for <code>[7,10,4,2,3]</code>, the result will be <code>2</code>.</p> <ul data-svelte-h="svelte-1svx1oj"><li>After running it, the result will be <code>2, 3, 4, 7, 10</code></li> <li>The result is the position in array, not the index!<ul><li>The number 3 is on the 2nd position (= index 1)</li></ul></li></ul> <p data-svelte-h="svelte-1ln20og">So, how do we combine this with the selection part? Well, we need to do it multiple times. So let’s do that!</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">quickSelect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> nthLowestNumber<span class="token punctuation">,</span> leftPointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightPointer <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftPointer <span class="token operator">===</span> rightPointer<span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">[</span>leftPointer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> leftPointer<span class="token punctuation">,</span> rightPointer<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pivotIndex <span class="token operator">===</span> nthLowestNumber<span class="token punctuation">)</span> <span class="token keyword">return</span> nthLowestNumber<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nthLowestNumber <span class="token operator">></span> pivotIndex<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">quickSelect</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> nthLowestNumber<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightPointer<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nthLowestNumber <span class="token operator">&lt;</span> pivotIndex<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">quickSelect</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> nthLowestNumber<span class="token punctuation">,</span> leftPointer<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>pivotIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> leftPointer<span class="token punctuation">,</span> rightPointer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>rightPointer<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pivotIndex <span class="token operator">=</span> leftPointer<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> leftPointer<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">swapArrayElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            pivotIndex<span class="token operator">++</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">// &lt;--- NOTE THIS</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-9o4s2u">In the quickselect now, we basically do:</p> <ul data-svelte-h="svelte-3fufdn"><li>if pointers are identical, then the value was found - return current position</li> <li>partition the array</li> <li>if the number we’re searching for is larger, that means it’s on the right, that means we start from <code>pivotIndex + 1</code> until <code>end</code></li> <li>if the number we’re searching for is smaller, that means it’s on the left, that means we start from <code>start</code>  to <code>pivotIndex - 1</code></li></ul> <p data-svelte-h="svelte-1ve7jn1">Note that I’ve mentioned before the <code>pivotIndex</code> in partition was the position. To retrieve the index, we’ll remove it once again</p> <ul data-svelte-h="svelte-cnoaa"><li>if we’d like the pivotIndex to really be index, we can make a couple adjustments inside the <code>for</code> loop:</li></ul> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// previously</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">swapArrayElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    pivotIndex<span class="token operator">++</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// later</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">swapArrayElements</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotIndex<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    pivotIndex<span class="token operator">++</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1ck41zg">And that’s it! That’s basically partition and quick select!</p> <p data-svelte-h="svelte-wuimjk">As I mentioned, both quicksort and quickselect use partitions. If you understood quickselect, you’ll surely understand quicksort. Because the only difference where you call it.</p> <ul data-svelte-h="svelte-o0q4bd"><li>In quickselect, we’re always moving towards the smaller/bigger numbers</li> <li>In quicksort, we want to do the operation on both sides</li></ul> <p data-svelte-h="svelte-v2efe1">So, quicksort would use exactly the same code as quickselect, except the “selecting” function would be sort:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> leftPointer<span class="token punctuation">,</span> rightPointer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightPointer <span class="token operator">-</span> leftPointer <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">const</span> pivotIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> rightPointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> leftPointer<span class="token punctuation">,</span> pivotIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> pivotIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightPointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-ph8qok">And that’s it! You’ve now learned quicksort and quickselect! Congratulations!</p> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-1gdi3n3">That was a wild ride! In this case, I’ve gone through a sorting and selecting algorithm.</p> <p data-svelte-h="svelte-1brfhzt">While sorting is a lot done under the hood by the languages we use, it’s still nice to take a look at how it’s actually done. It gives
us more knowledge about train of thought and how we can leverage it.</p> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-n6odah"><li><a href="https://www.amazon.com/Common-Sense-Guide-Data-Structures-Algorithms/dp/1680502441" rel="nofollow">A Common-Sense Guide to Data Structures and Algorithms</a></li> <li><a href="https://en.wikipedia.org/wiki/Quicksort" rel="nofollow">QuickSort</a></li> <li><a href="https://users.cs.utah.edu/~germain/PPS/Topics/recursion.html" rel="nofollow">Recursion</a></li> <li><a href="https://en.wikipedia.org/wiki/Call_stack" rel="nofollow">Call Stack</a></li> <li><a href="https://en.wikipedia.org/wiki/Quickselect" rel="nofollow">Quickselect</a></li> <li><a href="https://stackoverflow.com/questions/10863093/difference-between-quickselect-binary-search-selection" rel="nofollow">Quickselect vs Binary Search</a></li></ul>`;
});
export {
  _04_recursion as default
};
