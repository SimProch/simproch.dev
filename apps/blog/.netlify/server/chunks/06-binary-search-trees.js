import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./06-binary-search-trees2.js";
const _06_binary_search_trees = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-xe5rky">We’re now moving to trees where recursion will really shine. So, let’s talk a bit about trees before we dive deep into it.</p> <p data-svelte-h="svelte-yo6sbo">In arrays, I’ve shown a basic binary search, always halving the array, allowing for O(log N) complexity in search.</p> <p data-svelte-h="svelte-1f6srh9">Binary search trees make use of that. You could say they’re a special case of linked list.
Where linked list had a following single node, binary search trees have 2 following nodes</p> <p data-svelte-h="svelte-ryxkfx">So, how can a basic binary search look like? Well, in code, it’d look something like this:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> bst <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token literal-property property">leftNode</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">rightNode</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">15</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-15tdhg9">In essence, it’s a simple tree.</p> <ul data-svelte-h="svelte-wfvgi0"><li>it has a <strong>root</strong> node</li> <li>every <strong>node</strong> has reference to <strong>leftNode</strong> and <strong>rightNode</strong></li> <li><strong>leftNode</strong> value must be lesser than current <strong>node</strong></li> <li><strong>rightNode</strong> value must be greater than current <strong>node</strong></li></ul> <p data-svelte-h="svelte-wdw9g5">That’s pretty much all the rules. But there are some limiting factors</p> <h2 data-svelte-h="svelte-1qwagp3"><a href="#trees">Let’s talk trees</a><span id="trees"></span></h2> <p data-svelte-h="svelte-1g9xa0s">Consider that you have a tree of 3 levels. We’d have a total of 7 nodes (1 + 2 + 4)</p> <ul data-svelte-h="svelte-1lu2c2d"><li>root</li> <li>root-left, root-right</li> <li>root-left-left, root-left-right, root-right-left, root-right-left</li></ul> <p data-svelte-h="svelte-k5t98b">If you were to search in this tree, for any value, it’d take you 3 steps (the amount of levels).</p> <p data-svelte-h="svelte-btn3u4">But would it? Sometimes, your tree can be a little weird. Imagine that for some reason, all values are greater than the root node.
In such a case, the amount of levels would be 7, as well as the amount of nodes. See following image:</p> <img src="/images/data-structures-and-algorithms/bst-balanced.png" alt="Balanced BST" title="Balanced BST" class="image" loading="lazy"> <p data-svelte-h="svelte-1u220go">That would be unfortunate for multiple reasons:</p> <ul data-svelte-h="svelte-7pw0h1"><li>The traversal is usually using recursion. With many levels comes massive space complexity<ul><li>For 1000 nodes, finding the desired node:<ul><li>Unbalanced - 1000 operations, 1000 function calls (O(n))</li> <li>Balanced - 10 operations, 10 function calls (O(n log n))</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-1os5fg3">Some more terminology includes <strong>predecessor</strong> and <strong>successor</strong></p> <ul data-svelte-h="svelte-1rk6ris"><li>the current node has a value.</li> <li>the <strong>predecessor</strong> is the node with value closest to the current that is <strong>lesser</strong></li> <li>the <strong>successor</strong> is the node with value closest to the current that is <strong>greater</strong></li></ul> <p data-svelte-h="svelte-1xjwdus">With binary trees, these are fairly easy to find</p> <ul data-svelte-h="svelte-qcqhtx"><li><strong>predecessor</strong> is one node to the left, then all the way right</li> <li><strong>successor</strong> is one node to the right, then all the way to the left</li></ul> <img src="/images/data-structures-and-algorithms/bst-predecessor-successor.jpg" alt="BST predecesor & successor" title="BST predecesor & successor" class="image" loading="lazy"> <p data-svelte-h="svelte-xbjihh">And finally, traversing a tree. To go through a tree, we have 2 options:</p> <ul data-svelte-h="svelte-f9k0dy"><li>Go by levels (Breadth-First Search)</li> <li>Go as deep as you can (Depth-First Search)</li></ul> <p data-svelte-h="svelte-8bb1lz">We’ll implement them both eventually, but that’s enough of theory for now.</p> <h2 data-svelte-h="svelte-5z5txc"><a href="#comparison">BST versus other data structures</a><span id="comparison"></span></h2> <p data-svelte-h="svelte-1wiihfs">Before going deep into building a BST, let’s recap the benefits of BST:</p> <ul data-svelte-h="svelte-15770xl"><li>Arrays can be unsorted and operations in them can be relatively slow</li> <li>Sorting arrays is useful when we are working with them<ul><li>Sorting takes O(N log N)</li> <li>Insertion and deletion take O(N)</li></ul></li> <li>Hash tables are great, but unordered. While they are O(1) for insertion, deletion and search, the order is not given</li></ul> <p data-svelte-h="svelte-wlo48j">With those concepts above, we’re getting to the gist of it. Order. If we rely on sorted data, it’s worht creating a
data structure that is fast for addition and removal of data, as well as searching. Binary Search Tree is exactly that.</p> <p data-svelte-h="svelte-ktbtck">In worst case (completely unbalanced tree), binary search tree is just a doubly linked list.</p> <p data-svelte-h="svelte-idpw56">And finally, an interesting fact I found while searching online. Morse code can be written in binary search tree!</p> <ul data-svelte-h="svelte-6opgf1"><li>The values are dots and dashes</li> <li>When moving left, use dot</li> <li>When moving right, use dash</li></ul> <img src="/images/data-structures-and-algorithms/bst-morse-1.svg" alt="BST predecesor & successor" title="BST predecesor & successor" class="image" loading="lazy"> <img src="/images/data-structures-and-algorithms/bst-morse.jpeg" alt="BST predecesor & successor" title="BST predecesor & successor" class="image" loading="lazy"> <h2 data-svelte-h="svelte-1ukwuz0"><a href="#bst-operations">BST Operations</a><span id="bst-operations"></span></h2> <p data-svelte-h="svelte-c0cbsj">So, let’s deep dive to BST operations. We have:</p> <ul data-svelte-h="svelte-1syqnea"><li>insertion</li> <li>search (find value)</li> <li>traverse (move through all)</li> <li>deletion</li></ul> <p data-svelte-h="svelte-17pp9n2">So, let’s start with defining a node:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>
    leftChild<span class="token punctuation">;</span>
    rightChild<span class="token punctuation">;</span>
    value<span class="token punctuation">;</span>
    
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> right
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1iuf2q2">A simple tree node has basically 3 references:</p> <ul data-svelte-h="svelte-1dd03ht"><li>value</li> <li>left child (values smaller than current)</li> <li>right child (values greater than current)</li></ul> <p data-svelte-h="svelte-18quchw">Now, when we go inserting a node, we need to search for it first. Kind of.</p> <p data-svelte-h="svelte-1xgruxn">Each node takes care about the insertion for its own. Since we have a lot of nodes, we’ll move deeper down:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Value already exists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1xb3su4">The above code is fairly simple as it’s a bunch of if statements:</p> <ul data-svelte-h="svelte-1txtnjq"><li>If value already exists, we won’t do anything</li> <li>If the value is lesser than of current node, we’ll move to the left</li> <li>Otherwise, move to the right</li> <li>Create node when no node is connected</li></ul> <p data-svelte-h="svelte-q6apy4">Now, to try this out, let’s traverse it. Traversing is basically going through the entire tree. Traversing is simple - we just move to next nodes:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token operator">?.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-12zjdpf">Now, consider what you want to do with the value you’re traversing. Consider that you have the following tree:</p> <ul data-svelte-h="svelte-vf3do1"><li>25<ul><li>15<ul><li>10</li> <li>20</li></ul></li> <li>35<ul><li>30</li> <li>40</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-1nhtbi6">What if you put a print call on the first line, last line, or in between? Well, let’s take a look:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25, 15, 10, 20, 35, 30, 40</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 15, 20, 25, 30, 35, 40</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token operator">?.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10, 20, 15, 30, 40, 35, 25</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-87z0g7">If you compare the logs in there, you can see that:</p> <ul data-svelte-h="svelte-n1841s"><li>If you work with the print at the start, you’re printing them as you go through the tree. This is “Pre order” traversal</li> <li>If you work with the print in the middle, you have a “In Order” traversal. The values are listed as sorted</li> <li>If you work with the value at the end, you’re traversing “Post Order”. You go to the most left leaf and go up from there.</li></ul> <p data-svelte-h="svelte-blgrrf">This is better visible in the following example:</p> <img src="/images/data-structures-and-algorithms/bst-traversal.jpg" alt="BST traversal" title="BST traversal" class="image" loading="lazy"> <p data-svelte-h="svelte-1n6plwh">Let’s continue with finding a value, because this is where it really shines. This is very similar to insertion:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token function">findNodeWith</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">.</span><span class="token function">findNodeWith</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span><span class="token function">findNodeWith</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1q89y7">The above function is a simple search</p> <ul data-svelte-h="svelte-8flrd9"><li>If value is found, return the current node</li> <li>If not, go to the right or left, depending on size of the value</li> <li>Return null if value can’t be found</li></ul> <h2 data-svelte-h="svelte-ze4s8v"><a href="#deletion">Deletion</a><span id="deletion"></span></h2> <p data-svelte-h="svelte-10c6mgq">The most problematic part of binary search trees is deletion. As we’ve seen, insertion is easy:</p> <ul data-svelte-h="svelte-25dvnz"><li>To insert a value, we find the correct position. If value already exists, log error</li> <li>To traverse, we go through all nodes recursively</li> <li>To find a node, we halve the number of nodes every time we search by going only left/right depending on position</li></ul> <p data-svelte-h="svelte-1r829s">So, how do we delete a node? Well, here come the successor and predecessor nodes. First, let’s start with searching the node to delete:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">delete</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token operator">?.</span><span class="token function">delete</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">delete</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1b72p84">Now, that’s basically it for the delete itself. When we delete a node, we just find the node to delete and return it. The
problem comes with <strong>replacing</strong> the node.</p> <p data-svelte-h="svelte-14nprit">Now, if your IQ is on par with a the drawing sticks in a box of crayons, you may figure out what’s next</p> <ul data-svelte-h="svelte-1h3s8va"><li>We find the successor node (one step right, all the way to the left)</li> <li>We replace the current node with the successor</li></ul> <p data-svelte-h="svelte-1qv093z">Why with the successor? Well, consider the following:</p> <ul data-svelte-h="svelte-1pip387"><li>30<ul><li>25<ul><li>20</li> <li>27</li></ul></li> <li>35<ul><li>33<ul><li>31</li> <li>34</li></ul></li> <li>37</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-146u52i">So, what happens if you delete the number 30? What node takes its place?</p> <ul data-svelte-h="svelte-1botk3"><li>It still needs to be higher than the highest lowest value (27)</li> <li>It still needs to be lesser than lowest highest value (31)</li></ul> <p data-svelte-h="svelte-r2pa8">Well, the last point doesn’t exactly stand. Because we will use it as the next node. In the above example, we’ll replace
the node 30 with node 31. Let’s see what happens:</p> <ul data-svelte-h="svelte-1yo6ywv"><li>31<ul><li>25<ul><li>20</li> <li>27</li></ul></li> <li>35<ul><li>33<ul><li>null</li> <li>34</li></ul></li> <li>37</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-iht8l9">The binary tree is still intact. By replacing the node with successor, we’ve kept the order correct! We also need to relink existing links</p> <p data-svelte-h="svelte-jbchkt">So, let’s define ourselves a lift function!</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token function">lift</span><span class="token punctuation">(</span><span class="token parameter">parentNodeToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">lift</span><span class="token punctuation">(</span>parentNodeToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    parentNodeToDelete<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-bx7bmd">I invite you to try to draw the above code on a piece of paper, but basically:</p> <ul data-svelte-h="svelte-qvelxc"><li>lift is always called on a <code>right</code> node, therefore to find the successor, we move left (until there’s no higher left value).</li> <li>We find the successor node, and set the value of the deleted node to the current on</li> <li>We return the right child of this node (because there is no left child at this point)<ul><li>This is to relink the tree. All the child links are still intact, but we still need to connect them</li></ul></li></ul> <h2 data-svelte-h="svelte-16swnwo"><a href="#code">Code</a><span id="code"></span></h2> <p data-svelte-h="svelte-5n9rr1">The entire code will look something like this:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>
  leftChild<span class="token punctuation">;</span>
  rightChild<span class="token punctuation">;</span>
  value<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> right<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Value already exists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token operator">?.</span><span class="token function">traverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">findNodeWith</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">.</span><span class="token function">findNodeWith</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span><span class="token function">findNodeWith</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">delete</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token operator">?.</span><span class="token function">delete</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">delete</span><span class="token punctuation">(</span>valueToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>valueToDelete <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">.</span><span class="token function">lift</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">lift</span><span class="token punctuation">(</span><span class="token parameter">parentNodeToDelete</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>leftChild<span class="token operator">?.</span><span class="token function">lift</span><span class="token punctuation">(</span>parentNodeToDelete<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    parentNodeToDelete<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rightChild<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-1sap2vb">Binary trees are extremely useful in computer science. A lot of programmes run them under the hood because of how fast the insertion, deletion and search is.</p> <p data-svelte-h="svelte-1h7ic2m">That being said, it can’t be used everywhere. We need to keep in mind the spacial complexity.</p> <ul data-svelte-h="svelte-ektnob"><li>Imagine that we started at 1 and counted to 1000</li> <li>During traversal, we’d call 1000 times, and we would perform a lot of operations</li> <li>We are likely to hit recursion limits with unbalanced trees</li></ul> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-i72qmn"><li><a href="https://www.amazon.com/Common-Sense-Guide-Data-Structures-Algorithms/dp/1680502441" rel="nofollow">A Common-Sense Guide to Data Structures and Algorithms</a></li> <li><a href="https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/" rel="nofollow">Linked List in JS</a></li></ul>`;
});
export {
  _06_binary_search_trees as default
};
