import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./09-graphs2.js";
const _10_wrap_up = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-3b2btf">So, we’ve made it through quite a bunch of chapters. In this part, I’d like to perform a sort of wrap up.</p> <ul data-svelte-h="svelte-1jolyq"><li>We’ve investigated arrays and their structures related to it - Queues, Stacks, sets</li> <li>We’ve gone through hash maps and saw why they are fast</li> <li>We’ve gone through recursion and implemented quicksort &amp; quicksearch</li> <li>We’ve gone through node-based data structures<ul><li>Linked lists for more effective queues</li> <li>Binary search trees for fast searching</li> <li>Heaps for priority quueues</li> <li>Tries for text-based features</li> <li>Graphs for… everything</li></ul></li></ul> <p data-svelte-h="svelte-f9kanx">In this part, I’d like to revisit two of them.</p> <ul data-svelte-h="svelte-he4dwj"><li>Graphs</li> <li>Quicksort &amp; QuickSelect</li></ul> <p data-svelte-h="svelte-118dmmb">The first one to kinda open some eyes when working with them, because graphs don’t always need to be nodes. So, let’s take a look at a couple tasks:</p> <h2 data-svelte-h="svelte-n2ehyj"><a href="#diagonal-array-elements">Traverse array elements diagonally</a><span id="diagonal-array-elements"></span></h2> <p data-svelte-h="svelte-1kt5bx8">Let’s take a look at <a href="https://www.codewars.com/kata/5968fb556875980bd900000f" rel="nofollow">this CodeWars task</a>. The task is fairly simple:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token function">diagonal</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// => [2,1,9.7,6,3,5,7,4]</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1nevtkt">Now, you could do this with different ways. But you can actually view it as a graph!</p> <ul data-svelte-h="svelte-1vlrr6j"><li>we want to log bottom left first</li> <li>then we want to log adjacent cells (with top one being first)</li> <li>we perform until we’re done</li></ul> <p data-svelte-h="svelte-1kqm91m">And that looks oddly like BFS! So the result could look like this:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> <span class="token function-variable function">diagonal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">col</span><span class="token operator">:</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">row</span><span class="token operator">:</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> col<span class="token punctuation">,</span> row <span class="token punctuation">&#125;</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> adjacent <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">col</span><span class="token operator">:</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
        row<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        col<span class="token punctuation">,</span>
        <span class="token literal-property property">row</span><span class="token operator">:</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    adjacent<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> col<span class="token punctuation">,</span> row <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> exists <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>col <span class="token operator">===</span> col <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span>row <span class="token operator">===</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> valid <span class="token operator">=</span> col <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> row <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists <span class="token operator">&amp;&amp;</span> valid<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> col<span class="token punctuation">,</span> row <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-8kxztp">It’s a basic BFS:</p> <ul data-svelte-h="svelte-15iop7t"><li>enqueue not visited nodes</li> <li>push each to an array</li> <li>return the array</li></ul> <p data-svelte-h="svelte-okrf1s">And that’s it! Thanks to knowing graphs, I could very easily solve this potentially cumbersome!</p> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-c93uyx"><li><a href="(https://www.codewars.com/kata/5968fb556875980bd900000f)">Traverse array elements diagonally</a></li></ul>`;
});
export {
  _10_wrap_up as default
};
