import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./multiple-window-scene2.js";
const Multiple_window_scene = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(Contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-8c0be5">You may’ve seen on <a href="https://twitter.com/_nonfigurativ_/status/1727322594570027343" rel="nofollow">Twitter</a> that a guy created an amazing thing. Specifically,
showing multiple things inside a browser based on how many browsers are opened. He was also so kind as to <a href="https://github.com/bgstaal/multipleWindow3dScene" rel="nofollow">share</a> his
basic code on GitHub.</p> <p data-svelte-h="svelte-1jcgru1">Now, I’m not a designer, so doing some interesting stuff is something I’ll leave to the people who are better at it. What I’m interested in is the
coding behind it. And that’s what I’m going to break down in this part.</p> <h2 data-svelte-h="svelte-5eiaep"><a href="#code">The Code</a><span id="code"></span></h2> <p data-svelte-h="svelte-1ii6h8o">So, if we inspect the code, we can see basically 3 things happening:</p> <ul data-svelte-h="svelte-18mc4tg"><li>index.html being pretty much empty except for importing Three.JS and some scripts</li> <li>main.js handling the creation of shapes and using Three.JS</li> <li>WindowManager.js used for handling multiple windows</li></ul> <p data-svelte-h="svelte-5b1x0e">So, let’s break it down a bit!</p> <h2 data-svelte-h="svelte-1t1yh5i"><a href="#window-manager">Window Manager</a><span id="window-manager"></span></h2> <p data-svelte-h="svelte-1aty40c">So, the key here is event listener. Specifically, <code>window.addEventListener(&#39;storage&#39;)</code>.
In hindsight, it’s obvious that there’s an event listener for that. But I hadn’t considered that being a thing. So how exactly does it help us?</p> <p data-svelte-h="svelte-1ujdcql">Well, this is a clever play now. Basically, what we do is:</p> <ul data-svelte-h="svelte-1wwc35j"><li>When user accesses the page, a script is fired saying “Hey, I’m adding something to the local storage”.</li> <li>We intercept this event by the event listener</li> <li>We react to the event</li></ul> <p data-svelte-h="svelte-hun6p8">One thing to note is that this is actually something that propagates only to other browsers, not the current one! You can try it yourself:</p> <ul data-svelte-h="svelte-1h0uw3q"><li>Create an empty web page</li> <li>Add a button</li> <li>Add onclick handler with logs</li> <li>Open it in a single browser and see that the logs are never hit</li> <li>Open multiple browsers and see that they are always hit in the browser you’re not present in</li></ul> <p data-svelte-h="svelte-1pq2hnq">You can try that with the following code:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"storage"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hit in storage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre>`;
});
export {
  Multiple_window_scene as default
};
