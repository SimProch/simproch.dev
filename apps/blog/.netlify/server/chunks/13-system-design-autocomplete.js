import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./13-system-design-autocomplete2.js";
const _13_system_design_autocomplete = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-11j7v6f">So, you want to be like google, eh? Well, you’ve come to the right place.</p> <p data-svelte-h="svelte-f752uu">We’ve already built a web crawler. We understand now how to do that. However, would would we do autocomplete and allow
searching over the web? Well, let’s take a looks</p> <h2 data-svelte-h="svelte-1g9x5tr"><a href="#algorithms-data-structures">Algorithms &amp; Data Structures</a><span id="algorithms-data-structures"></span></h2> <p data-svelte-h="svelte-1gwep5p">This is again one of the questions where we need a deeper understanding of algorithms. Or, actually, data structures.</p> <p data-svelte-h="svelte-ak5u37">Why? Well, imagine the following:</p> <ul data-svelte-h="svelte-1lk4wuj"><li>You have 100 millions users</li> <li>User types in a query and gets a response</li> <li>You have saved previously searched queries</li></ul> <p data-svelte-h="svelte-1ql4ej8">Now, how would you search for them? People can look for a lot of stuff, sometimes weird stuff. Try getting all words starting
with “muy” in every google search ever searched.</p> <p data-svelte-h="svelte-7n0b6l">Luckily, there IS a data structure to help us. It’s a tree like structure. Let’s TRIE IT OUT (haha, I’ll see myself out).</p> <h3 data-svelte-h="svelte-10c2wbn"><a href="#trie">Trie</a><span id="trie"></span></h3> <p data-svelte-h="svelte-5xnedm">So, the data structure we’ll use is called a <a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow">Trie</a>. So, how does it work?</p> <p data-svelte-h="svelte-cwq16g">Well, let’s quickly say something about trees in Computer Science, because they are unnatural - they are basically trees upside down:</p> <ul data-svelte-h="svelte-15qx0eh"><li>They are root at the top</li> <li>They have branches - groups of nodes. Each branch can have its own branch.<ul><li>Imagine a tree with root and 2 nodes. There are 2 branches.</li> <li>If both nodes have 2 underlying nodes, there are 2 “global” branches and 2 “local” branches for each -&gt; total of 4 “local” branches</li></ul></li> <li>The outermost nodes are called “leafs”. Those are the nodes at the bottom.</li></ul> <p data-svelte-h="svelte-1xdslnn">Now, how does this help us? Well, tries are a specific kind of trees</p> <ul data-svelte-h="svelte-isuelx"><li>The root node is empty</li> <li>There are 26 children of root node - one for each alphabet letter</li> <li>Every subsequent nodes contain additional characters</li></ul> <p data-svelte-h="svelte-1nn16ph">So, consider the following trie:</p> <pre class="language-json"><!-- HTML_TAG_START -->${`<code class="language-json"><span class="token punctuation">&#123;</span>
    root<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        t<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            to<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            te<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                tea<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
                ted<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        a<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        i<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            in<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-5phwjw">Now, it looks really funky in the JSON above. But upon closer inspection, we can actually see it’s an autocomplete!</p> <ul data-svelte-h="svelte-5t6q1j"><li>There is a “t” child</li> <li>There is an “a” child</li> <li>There is an “i” child</li></ul> <p data-svelte-h="svelte-kzrxlx">Furthermore, we know that:</p> <ul data-svelte-h="svelte-e3o3ek"><li>There are 4 words in “t” - “to”, “te”, “tea”, and “ted”</li> <li>There are 0 words in “a”</li> <li>There is 1 word in “i” - “in”</li></ul> <p data-svelte-h="svelte-1vlglff">Now, we could use this as autocomplete. This is a very basic example, but if a user types “t”, we don’t need to search entire database!
We would just save all items in a Trie in the first place, and then whenever a user types “t”, we could immediately return 4 words rather than iterating over all!</p> <h3 data-svelte-h="svelte-kz5qxx"><a href="#expand-on-trie">Expanding upon trie</a><span id="expand-on-trie"></span></h3> <p data-svelte-h="svelte-d58lct">Now, let’s take it a little further. We can now see why tries are good for autocomplete. Imagine there are billions of records in there. You’d quickly filter out most.</p> <p data-svelte-h="svelte-103lo5p">In fact, you’d get to your requested result in a short time! All you have to do is find the node containing your text!</p> <p data-svelte-h="svelte-5iefdb">Consider the following:</p> <ul data-svelte-h="svelte-wkdsyw"><li>There are 6 words - “adam”, “eve”, “thomas”, “apple”, “anger”, “eloquent”</li> <li>User types in “t”</li> <li>If you’d have to fetch them all from DB, you’d iterate over 6 items</li> <li>With trie, you’d find the single occurence in 1 step - just go into the “t” branch</li></ul> <p data-svelte-h="svelte-q2lbkt">So, it’s also very fast! But, we also need to save these somewhere. You could either use key-value store (because it’s just JSON),
or you could use document store like <a href="https://www.mongodb.com/" rel="nofollow">MongoDB</a>.</p> <p data-svelte-h="svelte-13px03u">Great, now we have it also stored! But we still have an issue. How would we count the number of times something was searched? After all,
autocomplete often suggests most searched requests.</p> <p data-svelte-h="svelte-1941iu0">Well, let’s take a look back to the original example:</p> <pre class="language-json"><!-- HTML_TAG_START -->${`<code class="language-json"><span class="token punctuation">&#123;</span>
    root<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        t<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            to<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            te<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                tea<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
                ted<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        a<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        i<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            in<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1fuva5f">It’s just an object! So, we can also add some more values to it! We could just add another “node” to the root. But this time,
it would be just a property. For example, we could add <code>mostSearched: [&#39;tea&#39;, &#39;ted&#39;, &#39;in&#39;]</code>.</p> <p data-svelte-h="svelte-110s0ze">By this simple property, we could show right away what are the most searched. But we can do better! We can do this on every node!</p> <p data-svelte-h="svelte-mym3ag">Or even better! We can store the count of how many times it was searched! Consider the following:</p> <pre class="language-json"><!-- HTML_TAG_START -->${`<code class="language-json"><span class="token punctuation">&#123;</span>
    root<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        mostSearched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>tea<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>ted<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>in<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
        t<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            mostSearched<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>tea<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>ted<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>to<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>
            to<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            te<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                tea<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
                ted<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        a<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        i<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            in<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-u8yj81">With the above example, when a user focuses the input, we can immediately show him the most searched items</p> <ul data-svelte-h="svelte-199lqt5"><li>If he types in <code>t</code>, we can immediately show him most searched items starting with <code>t</code></li> <li>If he searches for <code>to</code>, we could then update the counter to <code>3</code></li> <li>If he would search for <code>to</code> many times, we would propagate it to <code>mostSearched</code> in parent nodes to adjust for the popularity</li></ul> <p data-svelte-h="svelte-64r6r9">Therefore, a Trie is a great tool for this! It’d finally in DB look something like this:</p> <img src="/images/system-design/saved-trie.png" alt="Trie in DB" title="Trie in DB" class="image" loading="lazy"> <h2 data-svelte-h="svelte-1g5f1pr"><a href="#high-level-design">Designing autocomplete</a><span id="high-level-design"></span></h2> <p data-svelte-h="svelte-g743uu">So, we now know how to store the data efficiently for autocomplete. Let’s try to come up with a design. Again, let’s consider
the requirements!</p> <ul data-svelte-h="svelte-1i5l5eq"><li>10 millions DAU</li> <li>all searches are lowercase</li> <li>search queries in english</li> <li>returns top 5 by popularity</li> <li>Only beginning of the query is taken into account</li></ul> <p data-svelte-h="svelte-10u4pdz">So, in short:</p> <ul data-svelte-h="svelte-53z8qo"><li>sorted by popularity</li> <li>high traffic</li> <li>high scalability</li> <li>relevant to the search term</li></ul> <h3 data-svelte-h="svelte-2wimp6"><a href="#bote">Back of the envelope</a><span id="bote"></span></h3> <ul data-svelte-h="svelte-18h6slv"><li>10 millions DAU</li> <li>Assume average 10 searches per day</li> <li>Assume 2 words</li> <li>Assume word ~= 5 characters</li> <li>Assume ASCII characters</li> <li>2 <em>5</em> 1 ~= 10 bytes</li></ul> <p data-svelte-h="svelte-1p6lrdh">Furthermore, let’s get the QPS:</p> <ul data-svelte-h="svelte-g85oce"><li>Each character typed in results in a query <code>mysearch.com?q=d</code> -&gt; <code>mysearch.com?q=di</code> -&gt; <code>mysearch.com?q=din</code> -&gt; <code>mysearch.com?q=dine</code></li> <li>That’s 10 characters per search</li> <li>10 characters per search * 10 searches per day ~= 100 queries</li> <li>10 millions DAU * 100 ~= 1000 millions ~= 1 billion queries per day</li> <li>1 billion / 24 / 60 / 60 ~= 1 billion / 88 000 ~= 1 000 000 000 / 100 000 ~= 10000 QPS</li> <li>Peak QPS ~= 2 * QPS ~= 20000</li> <li>Assume 5 % of queries are new ~= 1 billion * 0.05 ~= 50 millions ~= 50MB added daily</li></ul> <h3 data-svelte-h="svelte-r1ou65"><a href="#design">Design</a><span id="design"></span></h3> <p data-svelte-h="svelte-hskbxk">So, as mentioned above, if the dataset would be very small, we could easily just do this on a regular relational database with:</p> <pre class="language-sql"><!-- HTML_TAG_START -->${`<code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> myTable
<span class="token keyword">WHERE</span> query <span class="token operator">LIKE</span> <span class="token string">'&#123;prefix&#125;%'</span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> frequency <span class="token keyword">DESC</span>
<span class="token keyword">LIMIT</span> <span class="token number">5</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1syaoq">But, it’d be way too easy and not scalable. Soo, let’s do it the hard way!</p> <p data-svelte-h="svelte-1yl8pp0">So, we already know how we are going to store the data. It’s gonna be in a Trie. We’ll also cache the data in there. We’ve
already done it - we will keep the top searches on the individual nodes.</p> <p data-svelte-h="svelte-1t9yhy4">Now, we could make a decision here:</p> <ul data-svelte-h="svelte-1mciznm"><li>Is it searches across all time, OR</li> <li>Searches across N hours back</li></ul> <p data-svelte-h="svelte-19m74ln">If the latter, we’d have to set up some cache control. Otherwise, we could just keep them all the time and override it.</p> <p data-svelte-h="svelte-6etyc7">The problematic part here is analytics. Because we don’t want our search to be slowed down when analytics are broken.</p> <p data-svelte-h="svelte-oxfkja">Imagine the following flow:</p> <ul data-svelte-h="svelte-1du505y"><li>20k searches happen in one moment</li> <li>All of them perform write operations</li> <li>All of them retrieve data afterwards</li></ul> <p data-svelte-h="svelte-mm9ms7">Now, that can be fairly slow, especially with the writes. So, what we could do is separate the services. We’d have:</p> <ul data-svelte-h="svelte-1ugubrm"><li>A query service that handles requests and just reads data</li> <li>An analytics service that performs analytics and builds the trie</li></ul> <p data-svelte-h="svelte-1to9xyf">And that’s pretty much the design!</p> <ul data-svelte-h="svelte-1k2pwmy"><li>A user enters a web app and starts searching</li> <li>A request goes through load balancer to a server</li> <li>The request then retrieves the most searched items from query service, specifically Trie Cache</li></ul> <p data-svelte-h="svelte-11tdngz">In the background, an analytics service is also doing its job:</p> <ul data-svelte-h="svelte-1gj54q"><li>Analytics service goes through logs and passes them to aggregation services</li> <li>These services retrieve aggregated data, which are then passed to workers (servers performing asynchronous trie building)</li> <li>Workers perform weekly updates on Trie DB</li> <li>The latest weekly snapshot is loaded into Trie Cache, allowing for fast search</li> <li>The aggregated data would be aggregated by search term, frequency and date.</li></ul> <p data-svelte-h="svelte-jl074y">So, in the end, we’d have:</p> <ul data-svelte-h="svelte-1engvrj"><li>Query service behind a load balancer fetching data from cache</li> <li>Aggregate service populating the cache and doing the heavy lifting in the background</li></ul> <p data-svelte-h="svelte-mb6nhe">Furthermore, when the request is back in the browser, we could cache the most popular searches in local storage. That’d save
some server time as well and make it faster for the user.</p> <p data-svelte-h="svelte-1qnzde4">Finally, we could want to have some blacklisted suggestions with sexual or violent content. In that case, we’d still store them
in the Trie, but we would simply filter them out after retrieving them.</p> <p data-svelte-h="svelte-1c9wvye">For the storage - we can have a lot of data to store. So, how’d we scale that? Well, we could create multiple DBs per starting
letter (a-m, n-z), or even 1 for each letter (a, b, c, …, z). While it sounds reasonable, we’d quickly find out that
some letters are more common than others - quickly try to think about a word starting with X and starting with E.</p> <p data-svelte-h="svelte-5c6pjc">But, we could do some analytics around it and find the most suitable sharding approach, e.g.</p> <ul data-svelte-h="svelte-hs9tzb"><li>one server for words starting with <code>ea-em</code></li> <li>one for words starting with <code>en-ez</code></li> <li>one for words starting with <code>u-z</code></li></ul> <h1 data-svelte-h="svelte-q1wd6r"><a href="#summary">Summary</a><span id="summary"></span></h1> <p data-svelte-h="svelte-tncsd9">So, we’ve created an autocomplete. We’ve discussed Trie a lot, and this entire design is basically around that and potential
analytics of storage approach.</p> <p data-svelte-h="svelte-c0y7m8">Of course, we might need to support additional things. If we’d like to support multiple languages, we might need to support unicode (which is double in size).
We could create multiple tries per country as well. There are a lot of ideas.</p> <p data-svelte-h="svelte-1cjmo5h">Additionally, we could support trending searches - e.g. a news event broke out, such as war in Ukraine. For this case,
our system is not ready as we do not support real time updates. We’d have to be updating existing tries in the cache and
add weights based on searching within short time period (e.g. show “War in Ukraine” before “tree” even though “tree” was searched
for 100 times in the last 7 days, while “War in Ukraine” was searched 50 times, but in last hour)</p> <h1 data-svelte-h="svelte-uqufyh"><a href="#references">References</a><span id="references"></span></h1> <ul data-svelte-h="svelte-4qjy47"><li><a href="https://www.amazon.com/System-Design-Interview-insiders-Second/dp/B08CMF2CQF" rel="nofollow">System Design Interview book</a></li> <li><a href="https://en.wikipedia.org/wiki/Trie" rel="nofollow">Trie</a></li> <li><a href="https://www.mongodb.com/" rel="nofollow">MongoDB</a></li></ul>`;
});
export {
  _13_system_design_autocomplete as default
};
