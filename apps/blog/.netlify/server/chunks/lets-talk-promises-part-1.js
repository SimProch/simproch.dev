import { c as create_ssr_component } from "./ssr.js";
import { C as Contents } from "./lets-talk-promises-part-12.js";
const Lets_talk_promises_part_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1 data-svelte-h="svelte-bhdf74">Let’s talk promises - Part 1</h1> <p data-svelte-h="svelte-1hj5rr1">An asynchronous journey</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-1n50nlv">Promises are a core feature in JavaScript. They’ve been around all the way back in 2015 when <a href="http://es6-features.org/#PromiseUsage" rel="nofollow">ES6</a> became a standard.
Prior to that, libraries had their own implementations of asynchronous code. All code used in this post is available at <a href="https://github.com/SimProch/lets-talk-promises" rel="nofollow">my GitHub</a>.</p> <h2 data-svelte-h="svelte-97xp1k"><a href="#what-is-async">What is asynchronous?</a><span id="what-is-async"></span></h2> <p data-svelte-h="svelte-1w71rw1">So asynchronous is a term that’s been around for quite some time. There are other people that are better at explaining
how it works and I’d just be repeating that. However, I’d suggest the following resources:</p> <ul data-svelte-h="svelte-12o10wx"><li><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" rel="nofollow">What the heck is the event loop anyway by Philip Roberts</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/" rel="nofollow">Asynchronous Programming by Microsoft</a></li> <li><a href="https://www.youtube.com/watch?v=cCOL7MC4Pl0" rel="nofollow">JSConf In The Loop by Jake Archibald</a></li></ul> <p data-svelte-h="svelte-3fq2y6">How I like to view it in short is:</p> <ul data-svelte-h="svelte-1filni7"><li><strong>Synchronous</strong> code is where 2 lines in succession are always executed in the same order</li> <li><strong>Asynchronous</strong> code is where 2 lines in succession may or may not be executed in the same order</li></ul> <p data-svelte-h="svelte-andglb">The example of such code can be:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// synchronous</span>
<span class="token keyword">function</span> <span class="token function">getMyValueSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">getMyValueSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'First log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Second log - 20</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Third log'</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-j96681">Now, to make this simple <strong>synchronous</strong> code async, let’s use <code>Promises</code>:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// asynchronous</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getMyValueAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getMyValueAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"First log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Actually third log - 20</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Second log"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <blockquote data-svelte-h="svelte-1sjur6u"><p>In the previous example, I’ve used Immediately Invoked Function Expression, or IIFE for short.
This allows me to do the example in Node.JS directly. <a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow">You can read about them here</a>.</p></blockquote> <p data-svelte-h="svelte-1edg3so">Just like that, using the exact same code, yet putting there a bunch of <code>async</code> and <code>await</code> keywords, we’ve
made the code <strong>asynchronous</strong>. With <strong>synchronous</strong> code, we’ve logged:</p> <ul data-svelte-h="svelte-8djvko"><li>First log</li> <li>20</li> <li>Third log</li></ul> <p data-svelte-h="svelte-1vtnqsk">With <strong>asynchronous</strong> code, we’ve logged:</p> <ul data-svelte-h="svelte-16yzwtm"><li>First log</li> <li>Third log</li> <li>20</li></ul> <blockquote data-svelte-h="svelte-1yweb6h"><p>Note: You can (and, in fact, should) await the <code>myFunction</code> call in the last code block.<br>
I’ve purposely omitted it to show the dangers of async code - that 2 lines in succession might not be executed as expected</p></blockquote> <h2 data-svelte-h="svelte-hmx46o"><a href="#basic-promise">Basic Promise</a><span id="basic-promise"></span></h2> <p data-svelte-h="svelte-1ec6q3f">A promise has 3 states:</p> <ul data-svelte-h="svelte-1wnbfqk"><li><code>pending</code> - The <code>Promise</code> has not been neither <code>resolved</code> not <code>rejected</code></li> <li><code>fulfilled</code> - The <code>Promise</code> has reached a final state through <code>resolve</code></li> <li><code>rejected</code> - The <code>Promise</code> has reached a final state through <code>reject</code></li></ul> <p data-svelte-h="svelte-1kq4n4c">There are 2 ways to created a <code>Promise</code></p> <ul data-svelte-h="svelte-19tc666"><li><a href="http://es6-features.org/#PromiseUsage" rel="nofollow">ES6 Promise</a></li> <li><a href="https://gist.github.com/rajaramtt/7df3702a04c644b0b62c9a64f48f3dbf#3-ecmascript-2017---es2017---es8" rel="nofollow">ES8 Async/Await</a></li></ul> <p data-svelte-h="svelte-cygho">While I prefer the latter, it is beneficial to understand the first one to see what exactly is happening inside and why we need multiple ways of creating them.
Let’s create a couple <code>Promises</code> and look at the states defined above:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> myPendingPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myPendingPromise<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-ffv82s">When creating a <code>Promise</code> and don’t wait for it to finish, when we log it immediately, we can see in console <code>Promise { &lt;pending&gt; }</code>.
Now, let’s extend the code and see the state it is in after awaiting it:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> myPendingPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> myFulfilledPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> myFulfilledPromise<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myPendingPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFulfilledPromise<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1cmlzwx">In the console, now we’ll see:</p> <ul data-svelte-h="svelte-ilo0jo"><li><code>Promise { &lt;pending&gt; }</code> - The <code>Promise</code> has been defined, but the <code>resolve</code> is yet to be called because of timeout.</li> <li><code>Promise { undefined }</code> - The <code>Promise</code> has been defined and resolved immediately. This <code>Promise</code> is <code>fulfilled</code> and holds a value.</li></ul> <p data-svelte-h="svelte-10cwlfl">Note the <code>await myFulfilledPromise</code>. If I were to <code>await</code> on previous line, I’d have gotten the value <code>undefined</code> and could no longer log the state of the <code>Promise</code>.</p> <p data-svelte-h="svelte-1422128">Finally, let’s explore the <code>rejected</code> state. For the fulfilled, we’ve used the <code>resolve</code> callback.
For the <code>rejected</code>, we’ll need to use the <code>reject</code> function. Consider the following code</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> myRejectedPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1k0r70s">Now, unfortunately, this part is not going to work. That is because <strong>rejecting a promise throws an error</strong>. So, let’s wrap it in a <code>try/catch</code> block:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> myRejectedPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-8ygjhi">If we try to run this code, we’ll again reach the same error - <code>UnhandledPromiseRejection</code>. But that is because <code>Promises</code> are <strong>asynchronous</strong>! Let’s <code>await</code> it then:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> myRejectedPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> myRejectedPromise<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1jjncw3">In this case, the <code>Promise</code> was <code>rejected</code>. After exploring all these states, let’s put the code all together:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> myPendingPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> myFulfilledPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> myFulfilledPromise<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFulfilledPromise<span class="token punctuation">)</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> myRejectedPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> myRejectedPromise<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <h2 data-svelte-h="svelte-y1gkys"><a href="#combine-promise-async-await">Why do you combine Promise and async/await?</a><span id="combine-promise-async-await"></span></h2> <p data-svelte-h="svelte-2qotjj">So, in the examples before, I’ve used the <code>Promise</code> constructor rather than <code>async await</code> to create a <code>Promise</code>.
I’ve also said that you can create a <code>Promise</code> through those.</p> <p data-svelte-h="svelte-mu60xj">So, the important thing about <code>async/await</code> is that it applies to functions. Consider the following example:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span> <span class="token comment">// Promise &#123; 20 &#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1jvqukj">In the example above, I’ve created a <code>Promise</code> that holds a value 20 using <code>Promise constructor</code>.
To create a <code>Promise</code> that holds a value 20 with <code>async/await</code>, I can simply do this:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createPromise</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> val<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">createPromise</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Promise &#123; 20 &#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-34ukqz">To reject a promise, I’d do:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-mrnwqb">However, with <code>async/await</code>, I’m going to <code>throw</code>:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">throw</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">createPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-eumbsq">I believe that is enough for now. If you’d like to know how the world looked without <code>async/await</code> and it can kill your application,
read more in the <a href="/posts/lets-talk-promises-part-2">part 2 of Let’s talk promises</a></p> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-37wspk"><li><a href="http://es6-features.org/#PromiseUsage" rel="nofollow">ES6 Features Promise</a></li> <li><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" rel="nofollow">What the heck is the event loop anyway by Philip Roberts</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/" rel="nofollow">Asynchronous Programming by Microsoft</a></li> <li><a href="https://www.youtube.com/watch?v=cCOL7MC4Pl0" rel="nofollow">JSConf In The Loop by Jake Archibald</a></li> <li><a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE" rel="nofollow">IIFE</a></li> <li><a href="https://gist.github.com/rajaramtt/7df3702a04c644b0b62c9a64f48f3dbf#3-ecmascript-2017---es2017---es8" rel="nofollow">ES8 Features Async/Await</a></li> <li><a href="https://masteringjs.io/tutorials/fundamentals/thenable" rel="nofollow">Thenables in JavaScript</a></li> <li><a href="https://github.com/SimProch/lets-talk-promises" rel="nofollow">Code examples</a></li></ul>`;
});
export {
  Lets_talk_promises_part_1 as default
};
