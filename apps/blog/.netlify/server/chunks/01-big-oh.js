import { c as create_ssr_component, e as escape } from "./ssr.js";
import { C as Contents } from "./01-big-oh2.js";
const _01_big_oh = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const contents = Contents;
  if ($$props.contents === void 0 && $$bindings.contents && contents !== void 0)
    $$bindings.contents(contents);
  return `<h1>${escape(Contents.title)}</h1> <p>${escape(contents.subtitle)}</p> <h2 data-svelte-h="svelte-1j1kxdd"><a href="#intro">Introduction</a><span id="intro"></span></h2> <p data-svelte-h="svelte-18mfd4l">So, I’ve finished writing system design interview. But it’s not the end. It’s time for data structures and algorithms now!</p> <p data-svelte-h="svelte-1qtjax1">In software development, whenever we are creating a new feature, it’s important to choose the right data structure. For example,
with autocomplete, it’d be very difficult for us to create it without Trie.</p> <p data-svelte-h="svelte-g88a4i">Now, I’m not gonna put links here, yet. We’ll investigate individual structures. But to give an idea on efficiency, consider an array:</p> <ul data-svelte-h="svelte-18dk5uq"><li>Reading an array on a specific index is constant</li> <li>Searching for a specific item is variable<ul><li>Is the array sorted?</li> <li>Which algorithm is used?</li> <li>Do we only want to retrieve first occurence or all?</li></ul></li> <li>Inserting a specific item depends on the position<ul><li>At the end, O(1) - we only add 1</li> <li>At the beginning, O(n) - we need to add 1 and move all others</li></ul></li> <li>Deleting a specific item depends on position<ul><li>At the end, O(1) - we only remove 1</li> <li>At the beginning, O(n) - we need to remove 1 and move all others</li></ul></li> <li>On Set, it is similar to an array. Deleting is same. Inserting is different<ul><li>Set allows only unique values</li> <li>Set has to first be searched for the value before inserting</li> <li>Array will have faster insertion</li></ul></li></ul> <p data-svelte-h="svelte-cmuiql">It may look like we always want an Array, right? Inserting is slower. Deleting is same. Searching is same.</p> <p data-svelte-h="svelte-kdtuv1">But what really is the question is: <strong>Is it more important for our code to have no duplicates, or faster insertion</strong></p> <p data-svelte-h="svelte-kuvwg">So before I go forward, let me put an example of the importance:</p> <ul data-svelte-h="svelte-1jhne7m"><li>In code, we express what needs to be done by lines of code</li> <li>Effectively, every line of code we write is some kind of algorithms</li> <li>Algorithm basically means <em>instructions to follow</em>/<em>steps to perform</em></li> <li>If we define unnecessary steps, the code will be slower</li> <li>With algorithms, we can reduce the complexity of code</li></ul> <p data-svelte-h="svelte-ugpsky">Consider searching in an array:</p> <ul data-svelte-h="svelte-c5rlvn"><li>Take an unsorted array, find first item and return it<ul><li>We need to go one by one in the array and return the first item that matches our request</li> <li>Worst case scenario - we will find this item at the end of array</li> <li>If array has 1_000_000 items, we will perform 1_000_000 steps<ul><li>We could go from end, but if it is on the first index, we will still take N steps</li></ul></li></ul></li> <li>Take a sorted array, find first item and return it<ul><li>We have to take log<sub>2</sub> N steps to find the item</li> <li>We look at the middle and see if what we are searching for is higher/lower.<ul><li>If lower, we’ll take the lower half do the same.</li> <li>If higher, we’ll take higher half and do the same.</li> <li>If found, we’ll return it</li></ul></li> <li>If the array length is 1_000_000 and:<ul><li>we search for 500_000, we find it in the first step</li> <li>we search for 2, we find it in around 20 steps</li> <li>The complexity is log N</li></ul></li></ul></li></ul> <p data-svelte-h="svelte-mqexqs">Now, I’ve used O(n) notation above. And that’s the talk of this part. So, what is it?</p> <h2 data-svelte-h="svelte-1diwmql"><a href="#big-oh">Big Oh</a><span id="big-og"></span></h2> <p data-svelte-h="svelte-1b6j147">So, complexity! Ever so weird word! The next image shows a complexity chart:</p> <img src="/images/data-structures-and-algorithms/complexity_chart.jpeg" alt="Complexity Chart" title="Complexity Chart" class="image" loading="lazy"> <p data-svelte-h="svelte-y2dvqg">Now, we can see a bunch of stuff in there. From best to worst:</p> <ul data-svelte-h="svelte-osr0nz"><li>O(1) as excellent</li> <li>O(log n) as good</li> <li>O(n) as fair</li> <li>O(n log n) as bad</li> <li>O(n^2), O(2^n) and O(n^m), as horrible</li></ul> <p data-svelte-h="svelte-3unmde">Well, let’s put some more examples:</p> <ul data-svelte-h="svelte-jx6z4u"><li>Accessing array on an index is O(1).<ul><li>It doesn’t matter if I do <code>[1,2,3][0]</code> or <code>[1,2,3][2]</code>.</li> <li>It will still take the same time.</li> <li>It’s constant in all circumstances</li></ul></li> <li>Finding something by binary search is O(log n). The worst time it takes is the logarithm of n.<ul><li>Example is binary search on sorted array</li> <li>In worst case, it takes N steps</li></ul></li> <li>Finding something in array with regular search is O(n)<ul><li>Example is regular search on unsorted array</li> <li>In worst case, it will take N steps</li></ul></li> <li>Sorting an array <strong>properly</strong> is O(n log n)<ul><li>A sorting algorithm will traditionally take O(n log n) steps</li></ul></li> <li>Sorting an array by comparing all individual items is O(n^2)<ul><li>We will have to iterate through all elements twice</li></ul></li> <li>Recursive algorithms are often O(2^n)<ul><li>Given a number N, it will perform it’s operation on N, N-1, N-2, N-3</li> <li>For example, when I write a fibonacci function</li></ul></li></ul> <h2 data-svelte-h="svelte-eibm5w"><a href="#intermezzo">Intermezzo</a><span id="intermezzo"></span></h2> <p data-svelte-h="svelte-1wayh3b">So, we’ve learned a little about Big Oh. The gist of it is, it’s a math
way of saying “Hey, this takes some time”.</p> <p data-svelte-h="svelte-csilwy">Now, why do we care about something taking time? Well, imagine that your’e developing
Facebook. You have A LOT of data. If you store it in a bad way, your product will be
so slow it becomes unusable. Would you still use Facebook if it took 10 mins to send a
message? Probably not.</p> <p data-svelte-h="svelte-1t7oosd">So, what can we do with it? Well, we use it to speed up code.</p> <p data-svelte-h="svelte-qaytvp">As I mentioned before, we have a sorting algorithm.</p> <ul data-svelte-h="svelte-j6qns6"><li>If we use quicksort, it’s O(n log n)</li> <li>If we use bubble sort, it’s O(n^2)</li> <li>We can immediately tell that bubble sort is better</li></ul> <p data-svelte-h="svelte-z8rkzv">So, all in all, it’s just a short way of saying how efficient an algorithm is. And if we deem it too slow, then we can improve.</p> <h2 data-svelte-h="svelte-1ynd9pj"><a href="#speeding-with-big-oh">Speeding up code with Big Oh</a><span id="speeding-with-big-oh"></span></h2> <p data-svelte-h="svelte-nb4d45">So, how can we use Big Oh to speed up our code?</p> <p data-svelte-h="svelte-c0xpp1">Well, we can’t use Big Oh itself. What we choose is using:</p> <ul data-svelte-h="svelte-1usrnir"><li>A better data structure, or</li> <li>A better algorithm</li></ul> <p data-svelte-h="svelte-z68bui">So, let’s consider we’re searching in a sorted array:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-140pq9u">Let’s consider we’re searching for number 60.</p> <ul data-svelte-h="svelte-vlrvfu"><li>If we went from start to end, it’d take 60 steps</li> <li>If we went from end to start, it’d take 40 steps</li> <li>Worst case condition, it will always take 100 steps</li></ul> <p data-svelte-h="svelte-15dyze6">So, let’s use binary search!</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">binarySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">what</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> lowerBound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> upperBound <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span>upperBound <span class="token operator">>=</span> lowerBound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>upperBound <span class="token operator">-</span> lowerBound<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> lowerBound<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">===</span> what<span class="token punctuation">)</span> <span class="token keyword">return</span> what<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> what<span class="token punctuation">)</span> lowerBound <span class="token operator">=</span> middle<span class="token punctuation">;</span>
    <span class="token keyword">else</span> upperBound <span class="token operator">=</span> middle<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-a1fg3b">Now, with this, we’re basically looking at every middleth element. The most it can take is log(100). Or 7 steps (round up).
Can we use this always? Of course not. We can do it only on sorted arrays! But it’s a great example of usefulness!</p> <p data-svelte-h="svelte-1onn6y7">One thing to note here is the clever way with indices. Imagine the following code to do the search:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">binarySearch</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">what</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>_this<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>_this<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">===</span> what<span class="token punctuation">)</span> <span class="token keyword">return</span> what<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_this<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> what<span class="token punctuation">)</span> _this <span class="token operator">=</span> _this<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> _this <span class="token operator">=</span> _this<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> _this<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> what <span class="token operator">?</span> what <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-2ywa01">While it seemingly does the same thing, notice the <code>slice</code> method. Slicing an array is actually a
JavaScript implementation of a slicing algorithm, which would take some time. So, to actually be efficient, we’d
have to perform the clever index play.</p> <p data-svelte-h="svelte-6vukft">How would we perform the sort? Well, I’ve mentioned bubble sort and quick sort.
Let me quickly create bubble sort, because it’s very easy, but also very slow:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bubbleSort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> numberOfSorted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sorted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> unsortedUntil <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> numberOfSorted<span class="token punctuation">;</span>
    sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> unsortedUntil<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> previous <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>previous <span class="token operator">></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> previous<span class="token punctuation">;</span>
        sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    numberOfSorted<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

arr<span class="token punctuation">.</span><span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1h8w994">In this case, we start with reversed array. Then, we compare each items, and if they are out of order, we sort them</p> <p data-svelte-h="svelte-1im9jwf">And that’s it. Once we apply this bubble sort ONCE, all subsequent searches will be fast. And that’s the importance.</p> <h2 data-svelte-h="svelte-p180yf"><a href="#speeding-without-big-oh">Speeding up code without Big Oh</a><span id="speeding-without-big-oh"></span></h2> <p data-svelte-h="svelte-1y6gtoj">Now, in the previous example, we’ve sped up the search by applying it on a sorted array. We’ve:</p> <ul data-svelte-h="svelte-namj67"><li>Sorted the array first</li> <li>Performed all subsequent searches effectively</li></ul> <p data-svelte-h="svelte-zhz52j">Without sorting, all searches would be O(n). With it, all searches are O(log n).</p> <p data-svelte-h="svelte-11r5dcl">Now, it may very well be the case that 2 algorithm of same “Oh Rank” would not have the same speed.</p> <p data-svelte-h="svelte-1fpxbw1">Consider the following example:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token comment">// first</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> i<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// second</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1_000_000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-4bnusq">In the example, we have 2 for loops. But the first one is thrice as fast, because it performs less operations.
However, both would be considered O(n). That’s because constants are ignored.</p> <p data-svelte-h="svelte-1594rlt">If something takes O(3 * n) - such as the first example - it’d be still considered O(n).</p> <p data-svelte-h="svelte-lhmtiu">That’s also the reason why O(1) doesn’t mean it always takes 1 step. It means that no matter the circumstances,
it’ll always be equally fast (or slow). For an example of this, you can think of objects:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> res1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> res2 <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-1ggqasq">In the above example, the <code>res1</code> and <code>res2</code> retrievals take the same time.</p> <p data-svelte-h="svelte-1qlvwy7">With that in mind, I’ve previously done bubble sort. Let me quickly show selectionSort:</p> <pre class="language-js"><!-- HTML_TAG_START -->${`<code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">selectionSort</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">></span> curr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> curr<span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

arr<span class="token punctuation">.</span><span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`}<!-- HTML_TAG_END --></pre> <p data-svelte-h="svelte-13t2x03">If we compare the two, we basically have:</p> <ul data-svelte-h="svelte-10wk2gz"><li>bubbleSort, who compares 2 adjacent items on the entire array until it is sorted</li> <li>selectionSort, where an item is compared to all subsequent items.</li></ul> <p data-svelte-h="svelte-9cazei">In other words:</p> <ul data-svelte-h="svelte-e3utbo"><li>selectionSort will first find the element to 0th index, then first, up until nth index.</li> <li>bubbleSort is opposite - it will first make sure the biggest element is on the end</li></ul> <p data-svelte-h="svelte-11172cn">With that in mind, we can actually say that when an array is sorted ascending, bubble sort does nothing!</p> <p data-svelte-h="svelte-vsf569">However, selectionSort will still perform ~5k operations.</p> <p data-svelte-h="svelte-18ahdxd">So, even though both are O(n^2), you can choose one for better performance, depending on its usage.</p> <p data-svelte-h="svelte-8ztigq">I want to make one thing absolutely clear - none of these sorts are used nowadays as they are slow. However,
they are good examples of how something can be done it different ways with same “Oh Rank”, but have different speeds
depending on the usage.</p> <h2 data-svelte-h="svelte-1gat2or"><a href="#summary">Summary</a><span id="summary"></span></h2> <p data-svelte-h="svelte-18u1xkf">So, we’re at the end of Big Oh! The key takeaway about Big Oh is:</p> <ul data-svelte-h="svelte-mx7jew"><li>It’s valuable for getting an idea how fast something is</li> <li>The real run can actually be slower or faster, as it ignores constants<ul><li>6n operations is O(n)</li> <li>6n^2 operations is O(n^2)</li></ul></li></ul> <p data-svelte-h="svelte-1qlte0h">To get an idea of common use cases and algorithms used:</p> <ul data-svelte-h="svelte-1s6ldd0"><li>Word builder - nested loops<ul><li>O(N^M)</li> <li>N^2 with 2 letters, N^3 with 3 letters and so on</li></ul></li> <li>Palindrome - While until index is in middle<ul><li>O(N)</li> <li>Actually N / 2</li></ul></li> <li>Password Cracker - (a..z, aa..zz)<ul><li>With only alphabet, O(26^N)</li> <li>Extremely slow</li></ul></li></ul> <p data-svelte-h="svelte-1sq6yeb">Furthermore, we basically have 3 ways to optimize code:</p> <ul data-svelte-h="svelte-12288h"><li>Wisely choosing data structure (Allows for better algorithms for specific problems)</li> <li>Wisely choosing algorithm (Allows for better Big Oh Rank)</li> <li>Performing only necessary steps (Reducing number of steps yet retaining Big Oh Rank)</li></ul> <h2 data-svelte-h="svelte-153vzkz"><a href="#references">References</a><span id="references"></span></h2> <ul data-svelte-h="svelte-b9znl0"><li><a href="https://www.amazon.com/Common-Sense-Guide-Data-Structures-Algorithms/dp/1680502441" rel="nofollow">A Common-Sense Guide to Data Structures and Algorithms</a></li></ul>`;
});
export {
  _01_big_oh as default
};
